
L476_SPS30.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d90  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002f18  08002f18  00012f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f58  08002f58  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002f58  08002f58  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f58  08002f58  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f58  08002f58  00012f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f5c  08002f5c  00012f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002f60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2000000c  08002f6c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  08002f6c  000200c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bd66  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c16  00000000  00000000  0002bda2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a10  00000000  00000000  0002d9b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000928  00000000  00000000  0002e3c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024dfc  00000000  00000000  0002ecf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bade  00000000  00000000  00053aec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e14e7  00000000  00000000  0005f5ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00140ab1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002798  00000000  00000000  00140b04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002f00 	.word	0x08002f00

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002f00 	.word	0x08002f00

080001c8 <SPS30_startMeasurements>:
;	Function:		SPS30_startMeasurements
;	Description:	Start SPS30 Measurements
;	Inputs: 	 	Nothing
;	Returns:	 	Nothing
**********************************************************************************************/
void SPS30_startMeasurements(void){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af02      	add	r7, sp, #8

	uint8_t I2C_COMMAND[5];
	I2C_COMMAND[0] = 0x00;
 80001ce:	2300      	movs	r3, #0
 80001d0:	703b      	strb	r3, [r7, #0]
	I2C_COMMAND[1] = 0x10;
 80001d2:	2310      	movs	r3, #16
 80001d4:	707b      	strb	r3, [r7, #1]
	I2C_COMMAND[2] = 0x03;
 80001d6:	2303      	movs	r3, #3
 80001d8:	70bb      	strb	r3, [r7, #2]
	I2C_COMMAND[3] = 0x00;
 80001da:	2300      	movs	r3, #0
 80001dc:	70fb      	strb	r3, [r7, #3]
	I2C_COMMAND[4] = SPS30_MEASUREMENT_CHECKSUM;
 80001de:	23ac      	movs	r3, #172	; 0xac
 80001e0:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Master_Transmit( &hi2c1, SPS30_I2C_ADDRESS, I2C_COMMAND, sizeof( I2C_COMMAND ), HAL_MAX_DELAY );
 80001e2:	463a      	mov	r2, r7
 80001e4:	f04f 33ff 	mov.w	r3, #4294967295
 80001e8:	9300      	str	r3, [sp, #0]
 80001ea:	2305      	movs	r3, #5
 80001ec:	21d2      	movs	r1, #210	; 0xd2
 80001ee:	4803      	ldr	r0, [pc, #12]	; (80001fc <SPS30_startMeasurements+0x34>)
 80001f0:	f000 ff04 	bl	8000ffc <HAL_I2C_Master_Transmit>

}
 80001f4:	bf00      	nop
 80001f6:	3708      	adds	r7, #8
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bd80      	pop	{r7, pc}
 80001fc:	20000028 	.word	0x20000028

08000200 <SPS30_stopMeasurements>:
;	Function:		SPS30_stopMeasurements
;	Description:	Stop SPS30 Measurements
;	Inputs: 	 	Nothing
;	Returns:	 	Nothing
**********************************************************************************************/
void SPS30_stopMeasurements(void){
 8000200:	b580      	push	{r7, lr}
 8000202:	b084      	sub	sp, #16
 8000204:	af02      	add	r7, sp, #8

	uint16_t I2C_COMMAND[1];
	I2C_COMMAND[0] = SPS30_CMD_STOP_MEASUREMENT;
 8000206:	f240 4301 	movw	r3, #1025	; 0x401
 800020a:	80bb      	strh	r3, [r7, #4]

	HAL_I2C_Master_Transmit( &hi2c1, SPS30_I2C_ADDRESS, ( uint8_t* ) &I2C_COMMAND, sizeof( I2C_COMMAND ), HAL_MAX_DELAY );
 800020c:	1d3a      	adds	r2, r7, #4
 800020e:	f04f 33ff 	mov.w	r3, #4294967295
 8000212:	9300      	str	r3, [sp, #0]
 8000214:	2302      	movs	r3, #2
 8000216:	21d2      	movs	r1, #210	; 0xd2
 8000218:	4803      	ldr	r0, [pc, #12]	; (8000228 <SPS30_stopMeasurements+0x28>)
 800021a:	f000 feef 	bl	8000ffc <HAL_I2C_Master_Transmit>

}
 800021e:	bf00      	nop
 8000220:	3708      	adds	r7, #8
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}
 8000226:	bf00      	nop
 8000228:	20000028 	.word	0x20000028

0800022c <SPS30_sleep>:
;	Function:		SPS30_sleep
;	Description:	Set SPS30 in Sleep Mode
;	Inputs: 	 	Nothing
;	Returns:	 	Nothing
**********************************************************************************************/
void SPS30_sleep(void){
 800022c:	b580      	push	{r7, lr}
 800022e:	b084      	sub	sp, #16
 8000230:	af02      	add	r7, sp, #8

	uint16_t I2C_COMMAND[1];
	I2C_COMMAND[0] = SPS30_CMD_SLEEP;
 8000232:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000236:	80bb      	strh	r3, [r7, #4]

	HAL_I2C_Master_Transmit( &hi2c1, SPS30_I2C_ADDRESS, ( uint8_t* ) &I2C_COMMAND, sizeof( I2C_COMMAND ), HAL_MAX_DELAY );
 8000238:	1d3a      	adds	r2, r7, #4
 800023a:	f04f 33ff 	mov.w	r3, #4294967295
 800023e:	9300      	str	r3, [sp, #0]
 8000240:	2302      	movs	r3, #2
 8000242:	21d2      	movs	r1, #210	; 0xd2
 8000244:	4803      	ldr	r0, [pc, #12]	; (8000254 <SPS30_sleep+0x28>)
 8000246:	f000 fed9 	bl	8000ffc <HAL_I2C_Master_Transmit>

}
 800024a:	bf00      	nop
 800024c:	3708      	adds	r7, #8
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	20000028 	.word	0x20000028

08000258 <SPS30_wakeUp>:
;	Function:		SPS30_wakeUp
;	Description:	Awake SPS30 from Sleep Mode
;	Inputs: 	 	Nothing
;	Returns:	 	Nothing
**********************************************************************************************/
void SPS30_wakeUp(void){
 8000258:	b580      	push	{r7, lr}
 800025a:	b084      	sub	sp, #16
 800025c:	af02      	add	r7, sp, #8

	uint16_t I2C_COMMAND[1];
	I2C_COMMAND[0] = SPS30_CMD_WAKE_UP;
 800025e:	f240 3311 	movw	r3, #785	; 0x311
 8000262:	80bb      	strh	r3, [r7, #4]

	HAL_I2C_Master_Transmit( &hi2c1, SPS30_I2C_ADDRESS, ( uint8_t* ) &I2C_COMMAND, sizeof( I2C_COMMAND ), HAL_MAX_DELAY );
 8000264:	1d3a      	adds	r2, r7, #4
 8000266:	f04f 33ff 	mov.w	r3, #4294967295
 800026a:	9300      	str	r3, [sp, #0]
 800026c:	2302      	movs	r3, #2
 800026e:	21d2      	movs	r1, #210	; 0xd2
 8000270:	4807      	ldr	r0, [pc, #28]	; (8000290 <SPS30_wakeUp+0x38>)
 8000272:	f000 fec3 	bl	8000ffc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit( &hi2c1, SPS30_I2C_ADDRESS, ( uint8_t* ) &I2C_COMMAND, sizeof( I2C_COMMAND ), HAL_MAX_DELAY );
 8000276:	1d3a      	adds	r2, r7, #4
 8000278:	f04f 33ff 	mov.w	r3, #4294967295
 800027c:	9300      	str	r3, [sp, #0]
 800027e:	2302      	movs	r3, #2
 8000280:	21d2      	movs	r1, #210	; 0xd2
 8000282:	4803      	ldr	r0, [pc, #12]	; (8000290 <SPS30_wakeUp+0x38>)
 8000284:	f000 feba 	bl	8000ffc <HAL_I2C_Master_Transmit>

}
 8000288:	bf00      	nop
 800028a:	3708      	adds	r7, #8
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}
 8000290:	20000028 	.word	0x20000028

08000294 <SPS30_readMeasurements>:
;	Function:		SPS30_readMeasurements
;	Description:	Read Measurement Parameters from SPS30
;	Inputs: 	 	Nothing
;	Returns:	 	Readings ( as struct)
**********************************************************************************************/
struct measurements SPS30_readMeasurements(){
 8000294:	b5b0      	push	{r4, r5, r7, lr}
 8000296:	b098      	sub	sp, #96	; 0x60
 8000298:	af02      	add	r7, sp, #8
 800029a:	6078      	str	r0, [r7, #4]

	uint8_t rx_Buffer[30] 	= {0};
 800029c:	2300      	movs	r3, #0
 800029e:	63bb      	str	r3, [r7, #56]	; 0x38
 80002a0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80002a4:	2200      	movs	r2, #0
 80002a6:	601a      	str	r2, [r3, #0]
 80002a8:	605a      	str	r2, [r3, #4]
 80002aa:	609a      	str	r2, [r3, #8]
 80002ac:	60da      	str	r2, [r3, #12]
 80002ae:	611a      	str	r2, [r3, #16]
 80002b0:	615a      	str	r2, [r3, #20]
 80002b2:	831a      	strh	r2, [r3, #24]

	uint8_t I2C_COMMAND[2];
	I2C_COMMAND[0] = 0x03;
 80002b4:	2303      	movs	r3, #3
 80002b6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	I2C_COMMAND[1] = 0x00;
 80002ba:	2300      	movs	r3, #0
 80002bc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	HAL_I2C_Master_Transmit( &hi2c1, SPS30_I2C_ADDRESS, I2C_COMMAND, sizeof( I2C_COMMAND ), HAL_MAX_DELAY );
 80002c0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80002c4:	f04f 33ff 	mov.w	r3, #4294967295
 80002c8:	9300      	str	r3, [sp, #0]
 80002ca:	2302      	movs	r3, #2
 80002cc:	21d2      	movs	r1, #210	; 0xd2
 80002ce:	4845      	ldr	r0, [pc, #276]	; (80003e4 <SPS30_readMeasurements+0x150>)
 80002d0:	f000 fe94 	bl	8000ffc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive( &hi2c1, SPS30_I2C_ADDRESS, rx_Buffer, sizeof(rx_Buffer) , HAL_MAX_DELAY);
 80002d4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80002d8:	f04f 33ff 	mov.w	r3, #4294967295
 80002dc:	9300      	str	r3, [sp, #0]
 80002de:	231e      	movs	r3, #30
 80002e0:	21d2      	movs	r1, #210	; 0xd2
 80002e2:	4840      	ldr	r0, [pc, #256]	; (80003e4 <SPS30_readMeasurements+0x150>)
 80002e4:	f000 ff7e 	bl	80011e4 <HAL_I2C_Master_Receive>


	//uint16_t sps30_1p0 = (rx_Buffer[0] << 16) | (rx_Buffer[1] << 8) | rx_Buffer[2];

	struct measurements SPS30 = { .particle1p0 		= ((rx_Buffer[0] << 16) | (rx_Buffer[1] << 8) | rx_Buffer[2]),
 80002e8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80002ec:	041a      	lsls	r2, r3, #16
 80002ee:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80002f2:	021b      	lsls	r3, r3, #8
 80002f4:	4313      	orrs	r3, r2
 80002f6:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 80002fa:	4313      	orrs	r3, r2
 80002fc:	60fb      	str	r3, [r7, #12]
								  .particle2p5 		= ((rx_Buffer[3] << 16) | (rx_Buffer[4] << 8) | rx_Buffer[5]),
 80002fe:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000302:	041a      	lsls	r2, r3, #16
 8000304:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000308:	021b      	lsls	r3, r3, #8
 800030a:	4313      	orrs	r3, r2
 800030c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8000310:	4313      	orrs	r3, r2
	struct measurements SPS30 = { .particle1p0 		= ((rx_Buffer[0] << 16) | (rx_Buffer[1] << 8) | rx_Buffer[2]),
 8000312:	613b      	str	r3, [r7, #16]
								  .particle4p0 		= ((rx_Buffer[6] << 16) | (rx_Buffer[7] << 8) | rx_Buffer[8]),
 8000314:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000318:	041a      	lsls	r2, r3, #16
 800031a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800031e:	021b      	lsls	r3, r3, #8
 8000320:	4313      	orrs	r3, r2
 8000322:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8000326:	4313      	orrs	r3, r2
	struct measurements SPS30 = { .particle1p0 		= ((rx_Buffer[0] << 16) | (rx_Buffer[1] << 8) | rx_Buffer[2]),
 8000328:	617b      	str	r3, [r7, #20]
								  .particle10p 		= ((rx_Buffer[9] << 16) | (rx_Buffer[10] << 8) | rx_Buffer[11]),
 800032a:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800032e:	041a      	lsls	r2, r3, #16
 8000330:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8000334:	021b      	lsls	r3, r3, #8
 8000336:	4313      	orrs	r3, r2
 8000338:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 800033c:	4313      	orrs	r3, r2
	struct measurements SPS30 = { .particle1p0 		= ((rx_Buffer[0] << 16) | (rx_Buffer[1] << 8) | rx_Buffer[2]),
 800033e:	61bb      	str	r3, [r7, #24]
								  .concantration0p5 = ((rx_Buffer[12] << 16) | (rx_Buffer[13] << 8) | rx_Buffer[14]),
 8000340:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000344:	041a      	lsls	r2, r3, #16
 8000346:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800034a:	021b      	lsls	r3, r3, #8
 800034c:	4313      	orrs	r3, r2
 800034e:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8000352:	4313      	orrs	r3, r2
	struct measurements SPS30 = { .particle1p0 		= ((rx_Buffer[0] << 16) | (rx_Buffer[1] << 8) | rx_Buffer[2]),
 8000354:	61fb      	str	r3, [r7, #28]
								  .concantration1p0 = ((rx_Buffer[15] << 16) | (rx_Buffer[16] << 8) | rx_Buffer[17]),
 8000356:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800035a:	041a      	lsls	r2, r3, #16
 800035c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000360:	021b      	lsls	r3, r3, #8
 8000362:	4313      	orrs	r3, r2
 8000364:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8000368:	4313      	orrs	r3, r2
	struct measurements SPS30 = { .particle1p0 		= ((rx_Buffer[0] << 16) | (rx_Buffer[1] << 8) | rx_Buffer[2]),
 800036a:	623b      	str	r3, [r7, #32]
								  .concantration2p5 = ((rx_Buffer[18] << 16) | (rx_Buffer[19] << 8) | rx_Buffer[20]),
 800036c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8000370:	041a      	lsls	r2, r3, #16
 8000372:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000376:	021b      	lsls	r3, r3, #8
 8000378:	4313      	orrs	r3, r2
 800037a:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 800037e:	4313      	orrs	r3, r2
	struct measurements SPS30 = { .particle1p0 		= ((rx_Buffer[0] << 16) | (rx_Buffer[1] << 8) | rx_Buffer[2]),
 8000380:	627b      	str	r3, [r7, #36]	; 0x24
								  .concantration4p0 = ((rx_Buffer[21] << 16) | (rx_Buffer[22] << 8) | rx_Buffer[23]),
 8000382:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000386:	041a      	lsls	r2, r3, #16
 8000388:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800038c:	021b      	lsls	r3, r3, #8
 800038e:	4313      	orrs	r3, r2
 8000390:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8000394:	4313      	orrs	r3, r2
	struct measurements SPS30 = { .particle1p0 		= ((rx_Buffer[0] << 16) | (rx_Buffer[1] << 8) | rx_Buffer[2]),
 8000396:	62bb      	str	r3, [r7, #40]	; 0x28
								  .concantration10p = ((rx_Buffer[24] << 16) | (rx_Buffer[25] << 8) | rx_Buffer[26]),
 8000398:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800039c:	041a      	lsls	r2, r3, #16
 800039e:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80003a2:	021b      	lsls	r3, r3, #8
 80003a4:	4313      	orrs	r3, r2
 80003a6:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 80003aa:	4313      	orrs	r3, r2
	struct measurements SPS30 = { .particle1p0 		= ((rx_Buffer[0] << 16) | (rx_Buffer[1] << 8) | rx_Buffer[2]),
 80003ac:	62fb      	str	r3, [r7, #44]	; 0x2c
								  .particleSize		= ((rx_Buffer[27] << 16) | (rx_Buffer[28] << 8) | rx_Buffer[29])
 80003ae:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80003b2:	041a      	lsls	r2, r3, #16
 80003b4:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80003b8:	021b      	lsls	r3, r3, #8
 80003ba:	4313      	orrs	r3, r2
 80003bc:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 80003c0:	4313      	orrs	r3, r2
	struct measurements SPS30 = { .particle1p0 		= ((rx_Buffer[0] << 16) | (rx_Buffer[1] << 8) | rx_Buffer[2]),
 80003c2:	633b      	str	r3, [r7, #48]	; 0x30
	};

	return SPS30;
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	461d      	mov	r5, r3
 80003c8:	f107 040c 	add.w	r4, r7, #12
 80003cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80003d8:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80003dc:	6878      	ldr	r0, [r7, #4]
 80003de:	3758      	adds	r7, #88	; 0x58
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bdb0      	pop	{r4, r5, r7, pc}
 80003e4:	20000028 	.word	0x20000028

080003e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003e8:	b5b0      	push	{r4, r5, r7, lr}
 80003ea:	b08a      	sub	sp, #40	; 0x28
 80003ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003ee:	f000 fa4c 	bl	800088a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003f2:	f000 f877 	bl	80004e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003f6:	f000 f90b 	bl	8000610 <MX_GPIO_Init>
  MX_I2C1_Init();
 80003fa:	f000 f8c9 	bl	8000590 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* Wait for I2C Initialization*/
  HAL_Delay(50);
 80003fe:	2032      	movs	r0, #50	; 0x32
 8000400:	f000 fab8 	bl	8000974 <HAL_Delay>
  /* Enable Sensor Measurements*/
  SPS30_startMeasurements();
 8000404:	f7ff fee0 	bl	80001c8 <SPS30_startMeasurements>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  s = SPS30_readMeasurements();
 8000408:	4c2b      	ldr	r4, [pc, #172]	; (80004b8 <main+0xd0>)
 800040a:	463b      	mov	r3, r7
 800040c:	4618      	mov	r0, r3
 800040e:	f7ff ff41 	bl	8000294 <SPS30_readMeasurements>
 8000412:	4625      	mov	r5, r4
 8000414:	463c      	mov	r4, r7
 8000416:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000418:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800041a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800041c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800041e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000422:	e885 0003 	stmia.w	r5, {r0, r1}

	  HAL_Delay(500);
 8000426:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800042a:	f000 faa3 	bl	8000974 <HAL_Delay>

	  data1 = s.particle1p0;
 800042e:	4b22      	ldr	r3, [pc, #136]	; (80004b8 <main+0xd0>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4a22      	ldr	r2, [pc, #136]	; (80004bc <main+0xd4>)
 8000434:	6013      	str	r3, [r2, #0]
	  data2 = s.particle2p5;
 8000436:	4b20      	ldr	r3, [pc, #128]	; (80004b8 <main+0xd0>)
 8000438:	685b      	ldr	r3, [r3, #4]
 800043a:	4a21      	ldr	r2, [pc, #132]	; (80004c0 <main+0xd8>)
 800043c:	6013      	str	r3, [r2, #0]
	  data3 = s.particle4p0;
 800043e:	4b1e      	ldr	r3, [pc, #120]	; (80004b8 <main+0xd0>)
 8000440:	689b      	ldr	r3, [r3, #8]
 8000442:	4a20      	ldr	r2, [pc, #128]	; (80004c4 <main+0xdc>)
 8000444:	6013      	str	r3, [r2, #0]
	  data4 = s.particle10p;
 8000446:	4b1c      	ldr	r3, [pc, #112]	; (80004b8 <main+0xd0>)
 8000448:	68db      	ldr	r3, [r3, #12]
 800044a:	4a1f      	ldr	r2, [pc, #124]	; (80004c8 <main+0xe0>)
 800044c:	6013      	str	r3, [r2, #0]
	  data5 = s.concantration0p5;
 800044e:	4b1a      	ldr	r3, [pc, #104]	; (80004b8 <main+0xd0>)
 8000450:	691b      	ldr	r3, [r3, #16]
 8000452:	4a1e      	ldr	r2, [pc, #120]	; (80004cc <main+0xe4>)
 8000454:	6013      	str	r3, [r2, #0]
	  data6 = s.concantration1p0;
 8000456:	4b18      	ldr	r3, [pc, #96]	; (80004b8 <main+0xd0>)
 8000458:	695b      	ldr	r3, [r3, #20]
 800045a:	4a1d      	ldr	r2, [pc, #116]	; (80004d0 <main+0xe8>)
 800045c:	6013      	str	r3, [r2, #0]
	  data7 = s.concantration2p5;
 800045e:	4b16      	ldr	r3, [pc, #88]	; (80004b8 <main+0xd0>)
 8000460:	699b      	ldr	r3, [r3, #24]
 8000462:	4a1c      	ldr	r2, [pc, #112]	; (80004d4 <main+0xec>)
 8000464:	6013      	str	r3, [r2, #0]
	  data8 = s.concantration4p0;
 8000466:	4b14      	ldr	r3, [pc, #80]	; (80004b8 <main+0xd0>)
 8000468:	69db      	ldr	r3, [r3, #28]
 800046a:	4a1b      	ldr	r2, [pc, #108]	; (80004d8 <main+0xf0>)
 800046c:	6013      	str	r3, [r2, #0]
	  data9 = s.concantration10p;
 800046e:	4b12      	ldr	r3, [pc, #72]	; (80004b8 <main+0xd0>)
 8000470:	6a1b      	ldr	r3, [r3, #32]
 8000472:	4a1a      	ldr	r2, [pc, #104]	; (80004dc <main+0xf4>)
 8000474:	6013      	str	r3, [r2, #0]
	  data10 = s.particleSize;
 8000476:	4b10      	ldr	r3, [pc, #64]	; (80004b8 <main+0xd0>)
 8000478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800047a:	4a19      	ldr	r2, [pc, #100]	; (80004e0 <main+0xf8>)
 800047c:	6013      	str	r3, [r2, #0]


	  HAL_Delay(10000);
 800047e:	f242 7010 	movw	r0, #10000	; 0x2710
 8000482:	f000 fa77 	bl	8000974 <HAL_Delay>
	  SPS30_stopMeasurements();
 8000486:	f7ff febb 	bl	8000200 <SPS30_stopMeasurements>

	  HAL_Delay(10000);
 800048a:	f242 7010 	movw	r0, #10000	; 0x2710
 800048e:	f000 fa71 	bl	8000974 <HAL_Delay>
	  SPS30_sleep();
 8000492:	f7ff fecb 	bl	800022c <SPS30_sleep>
	  HAL_Delay(10000);
 8000496:	f242 7010 	movw	r0, #10000	; 0x2710
 800049a:	f000 fa6b 	bl	8000974 <HAL_Delay>
	  SPS30_wakeUp();
 800049e:	f7ff fedb 	bl	8000258 <SPS30_wakeUp>
	  HAL_Delay(10000);
 80004a2:	f242 7010 	movw	r0, #10000	; 0x2710
 80004a6:	f000 fa65 	bl	8000974 <HAL_Delay>

	  SPS30_startMeasurements();
 80004aa:	f7ff fe8d 	bl	80001c8 <SPS30_startMeasurements>

	  HAL_Delay(8000);
 80004ae:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80004b2:	f000 fa5f 	bl	8000974 <HAL_Delay>
	  s = SPS30_readMeasurements();
 80004b6:	e7a7      	b.n	8000408 <main+0x20>
 80004b8:	2000008c 	.word	0x2000008c
 80004bc:	20000074 	.word	0x20000074
 80004c0:	20000078 	.word	0x20000078
 80004c4:	20000088 	.word	0x20000088
 80004c8:	20000080 	.word	0x20000080
 80004cc:	200000b8 	.word	0x200000b8
 80004d0:	200000c0 	.word	0x200000c0
 80004d4:	200000b4 	.word	0x200000b4
 80004d8:	20000084 	.word	0x20000084
 80004dc:	2000007c 	.word	0x2000007c
 80004e0:	200000bc 	.word	0x200000bc

080004e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b096      	sub	sp, #88	; 0x58
 80004e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ea:	f107 0314 	add.w	r3, r7, #20
 80004ee:	2244      	movs	r2, #68	; 0x44
 80004f0:	2100      	movs	r1, #0
 80004f2:	4618      	mov	r0, r3
 80004f4:	f002 fcfc 	bl	8002ef0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f8:	463b      	mov	r3, r7
 80004fa:	2200      	movs	r2, #0
 80004fc:	601a      	str	r2, [r3, #0]
 80004fe:	605a      	str	r2, [r3, #4]
 8000500:	609a      	str	r2, [r3, #8]
 8000502:	60da      	str	r2, [r3, #12]
 8000504:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000506:	f44f 7000 	mov.w	r0, #512	; 0x200
 800050a:	f001 f9f7 	bl	80018fc <HAL_PWREx_ControlVoltageScaling>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d001      	beq.n	8000518 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000514:	f000 f8ac 	bl	8000670 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000518:	f001 f9d2 	bl	80018c0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800051c:	4b1b      	ldr	r3, [pc, #108]	; (800058c <SystemClock_Config+0xa8>)
 800051e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000522:	4a1a      	ldr	r2, [pc, #104]	; (800058c <SystemClock_Config+0xa8>)
 8000524:	f023 0318 	bic.w	r3, r3, #24
 8000528:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800052c:	2314      	movs	r3, #20
 800052e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000530:	2301      	movs	r3, #1
 8000532:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000534:	2301      	movs	r3, #1
 8000536:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000538:	2300      	movs	r3, #0
 800053a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 800053c:	23a0      	movs	r3, #160	; 0xa0
 800053e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000540:	2300      	movs	r3, #0
 8000542:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000544:	f107 0314 	add.w	r3, r7, #20
 8000548:	4618      	mov	r0, r3
 800054a:	f001 fa2d 	bl	80019a8 <HAL_RCC_OscConfig>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000554:	f000 f88c 	bl	8000670 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000558:	230f      	movs	r3, #15
 800055a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800055c:	2300      	movs	r3, #0
 800055e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000560:	2300      	movs	r3, #0
 8000562:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000564:	2300      	movs	r3, #0
 8000566:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000568:	2300      	movs	r3, #0
 800056a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800056c:	463b      	mov	r3, r7
 800056e:	2101      	movs	r1, #1
 8000570:	4618      	mov	r0, r3
 8000572:	f001 fdff 	bl	8002174 <HAL_RCC_ClockConfig>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800057c:	f000 f878 	bl	8000670 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000580:	f002 fab0 	bl	8002ae4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000584:	bf00      	nop
 8000586:	3758      	adds	r7, #88	; 0x58
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	40021000 	.word	0x40021000

08000590 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000594:	4b1b      	ldr	r3, [pc, #108]	; (8000604 <MX_I2C1_Init+0x74>)
 8000596:	4a1c      	ldr	r2, [pc, #112]	; (8000608 <MX_I2C1_Init+0x78>)
 8000598:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800059a:	4b1a      	ldr	r3, [pc, #104]	; (8000604 <MX_I2C1_Init+0x74>)
 800059c:	4a1b      	ldr	r2, [pc, #108]	; (800060c <MX_I2C1_Init+0x7c>)
 800059e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005a0:	4b18      	ldr	r3, [pc, #96]	; (8000604 <MX_I2C1_Init+0x74>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005a6:	4b17      	ldr	r3, [pc, #92]	; (8000604 <MX_I2C1_Init+0x74>)
 80005a8:	2201      	movs	r2, #1
 80005aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005ac:	4b15      	ldr	r3, [pc, #84]	; (8000604 <MX_I2C1_Init+0x74>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005b2:	4b14      	ldr	r3, [pc, #80]	; (8000604 <MX_I2C1_Init+0x74>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005b8:	4b12      	ldr	r3, [pc, #72]	; (8000604 <MX_I2C1_Init+0x74>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005be:	4b11      	ldr	r3, [pc, #68]	; (8000604 <MX_I2C1_Init+0x74>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005c4:	4b0f      	ldr	r3, [pc, #60]	; (8000604 <MX_I2C1_Init+0x74>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005ca:	480e      	ldr	r0, [pc, #56]	; (8000604 <MX_I2C1_Init+0x74>)
 80005cc:	f000 fc86 	bl	8000edc <HAL_I2C_Init>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80005d6:	f000 f84b 	bl	8000670 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005da:	2100      	movs	r1, #0
 80005dc:	4809      	ldr	r0, [pc, #36]	; (8000604 <MX_I2C1_Init+0x74>)
 80005de:	f001 f8d7 	bl	8001790 <HAL_I2CEx_ConfigAnalogFilter>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80005e8:	f000 f842 	bl	8000670 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005ec:	2100      	movs	r1, #0
 80005ee:	4805      	ldr	r0, [pc, #20]	; (8000604 <MX_I2C1_Init+0x74>)
 80005f0:	f001 f919 	bl	8001826 <HAL_I2CEx_ConfigDigitalFilter>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005fa:	f000 f839 	bl	8000670 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005fe:	bf00      	nop
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	20000028 	.word	0x20000028
 8000608:	40005400 	.word	0x40005400
 800060c:	00707cbb 	.word	0x00707cbb

08000610 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000610:	b480      	push	{r7}
 8000612:	b085      	sub	sp, #20
 8000614:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000616:	4b15      	ldr	r3, [pc, #84]	; (800066c <MX_GPIO_Init+0x5c>)
 8000618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061a:	4a14      	ldr	r2, [pc, #80]	; (800066c <MX_GPIO_Init+0x5c>)
 800061c:	f043 0304 	orr.w	r3, r3, #4
 8000620:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000622:	4b12      	ldr	r3, [pc, #72]	; (800066c <MX_GPIO_Init+0x5c>)
 8000624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000626:	f003 0304 	and.w	r3, r3, #4
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062e:	4b0f      	ldr	r3, [pc, #60]	; (800066c <MX_GPIO_Init+0x5c>)
 8000630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000632:	4a0e      	ldr	r2, [pc, #56]	; (800066c <MX_GPIO_Init+0x5c>)
 8000634:	f043 0301 	orr.w	r3, r3, #1
 8000638:	64d3      	str	r3, [r2, #76]	; 0x4c
 800063a:	4b0c      	ldr	r3, [pc, #48]	; (800066c <MX_GPIO_Init+0x5c>)
 800063c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800063e:	f003 0301 	and.w	r3, r3, #1
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000646:	4b09      	ldr	r3, [pc, #36]	; (800066c <MX_GPIO_Init+0x5c>)
 8000648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064a:	4a08      	ldr	r2, [pc, #32]	; (800066c <MX_GPIO_Init+0x5c>)
 800064c:	f043 0302 	orr.w	r3, r3, #2
 8000650:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000652:	4b06      	ldr	r3, [pc, #24]	; (800066c <MX_GPIO_Init+0x5c>)
 8000654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000656:	f003 0302 	and.w	r3, r3, #2
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	687b      	ldr	r3, [r7, #4]

}
 800065e:	bf00      	nop
 8000660:	3714      	adds	r7, #20
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	40021000 	.word	0x40021000

08000670 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000674:	b672      	cpsid	i
}
 8000676:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000678:	e7fe      	b.n	8000678 <Error_Handler+0x8>
	...

0800067c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000682:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <HAL_MspInit+0x44>)
 8000684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000686:	4a0e      	ldr	r2, [pc, #56]	; (80006c0 <HAL_MspInit+0x44>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	6613      	str	r3, [r2, #96]	; 0x60
 800068e:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <HAL_MspInit+0x44>)
 8000690:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800069a:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <HAL_MspInit+0x44>)
 800069c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800069e:	4a08      	ldr	r2, [pc, #32]	; (80006c0 <HAL_MspInit+0x44>)
 80006a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006a4:	6593      	str	r3, [r2, #88]	; 0x58
 80006a6:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <HAL_MspInit+0x44>)
 80006a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ae:	603b      	str	r3, [r7, #0]
 80006b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006b2:	bf00      	nop
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	40021000 	.word	0x40021000

080006c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b0ac      	sub	sp, #176	; 0xb0
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006dc:	f107 0314 	add.w	r3, r7, #20
 80006e0:	2288      	movs	r2, #136	; 0x88
 80006e2:	2100      	movs	r1, #0
 80006e4:	4618      	mov	r0, r3
 80006e6:	f002 fc03 	bl	8002ef0 <memset>
  if(hi2c->Instance==I2C1)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	4a21      	ldr	r2, [pc, #132]	; (8000774 <HAL_I2C_MspInit+0xb0>)
 80006f0:	4293      	cmp	r3, r2
 80006f2:	d13b      	bne.n	800076c <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80006f4:	2340      	movs	r3, #64	; 0x40
 80006f6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006fc:	f107 0314 	add.w	r3, r7, #20
 8000700:	4618      	mov	r0, r3
 8000702:	f001 ff05 	bl	8002510 <HAL_RCCEx_PeriphCLKConfig>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800070c:	f7ff ffb0 	bl	8000670 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000710:	4b19      	ldr	r3, [pc, #100]	; (8000778 <HAL_I2C_MspInit+0xb4>)
 8000712:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000714:	4a18      	ldr	r2, [pc, #96]	; (8000778 <HAL_I2C_MspInit+0xb4>)
 8000716:	f043 0302 	orr.w	r3, r3, #2
 800071a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800071c:	4b16      	ldr	r3, [pc, #88]	; (8000778 <HAL_I2C_MspInit+0xb4>)
 800071e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000720:	f003 0302 	and.w	r3, r3, #2
 8000724:	613b      	str	r3, [r7, #16]
 8000726:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000728:	f44f 7340 	mov.w	r3, #768	; 0x300
 800072c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000730:	2312      	movs	r3, #18
 8000732:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000736:	2300      	movs	r3, #0
 8000738:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800073c:	2303      	movs	r3, #3
 800073e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000742:	2304      	movs	r3, #4
 8000744:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000748:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800074c:	4619      	mov	r1, r3
 800074e:	480b      	ldr	r0, [pc, #44]	; (800077c <HAL_I2C_MspInit+0xb8>)
 8000750:	f000 fa1a 	bl	8000b88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000754:	4b08      	ldr	r3, [pc, #32]	; (8000778 <HAL_I2C_MspInit+0xb4>)
 8000756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000758:	4a07      	ldr	r2, [pc, #28]	; (8000778 <HAL_I2C_MspInit+0xb4>)
 800075a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800075e:	6593      	str	r3, [r2, #88]	; 0x58
 8000760:	4b05      	ldr	r3, [pc, #20]	; (8000778 <HAL_I2C_MspInit+0xb4>)
 8000762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000764:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000768:	60fb      	str	r3, [r7, #12]
 800076a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800076c:	bf00      	nop
 800076e:	37b0      	adds	r7, #176	; 0xb0
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40005400 	.word	0x40005400
 8000778:	40021000 	.word	0x40021000
 800077c:	48000400 	.word	0x48000400

08000780 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000784:	e7fe      	b.n	8000784 <NMI_Handler+0x4>

08000786 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000786:	b480      	push	{r7}
 8000788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800078a:	e7fe      	b.n	800078a <HardFault_Handler+0x4>

0800078c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000790:	e7fe      	b.n	8000790 <MemManage_Handler+0x4>

08000792 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000792:	b480      	push	{r7}
 8000794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000796:	e7fe      	b.n	8000796 <BusFault_Handler+0x4>

08000798 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800079c:	e7fe      	b.n	800079c <UsageFault_Handler+0x4>

0800079e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800079e:	b480      	push	{r7}
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007a2:	bf00      	nop
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr

080007ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007b0:	bf00      	nop
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr

080007ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007be:	bf00      	nop
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr

080007c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007cc:	f000 f8b2 	bl	8000934 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80007d8:	4b15      	ldr	r3, [pc, #84]	; (8000830 <SystemInit+0x5c>)
 80007da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007de:	4a14      	ldr	r2, [pc, #80]	; (8000830 <SystemInit+0x5c>)
 80007e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80007e8:	4b12      	ldr	r3, [pc, #72]	; (8000834 <SystemInit+0x60>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a11      	ldr	r2, [pc, #68]	; (8000834 <SystemInit+0x60>)
 80007ee:	f043 0301 	orr.w	r3, r3, #1
 80007f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80007f4:	4b0f      	ldr	r3, [pc, #60]	; (8000834 <SystemInit+0x60>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80007fa:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <SystemInit+0x60>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4a0d      	ldr	r2, [pc, #52]	; (8000834 <SystemInit+0x60>)
 8000800:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000804:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000808:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800080a:	4b0a      	ldr	r3, [pc, #40]	; (8000834 <SystemInit+0x60>)
 800080c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000810:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000812:	4b08      	ldr	r3, [pc, #32]	; (8000834 <SystemInit+0x60>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a07      	ldr	r2, [pc, #28]	; (8000834 <SystemInit+0x60>)
 8000818:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800081c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800081e:	4b05      	ldr	r3, [pc, #20]	; (8000834 <SystemInit+0x60>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
}
 8000824:	bf00      	nop
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	e000ed00 	.word	0xe000ed00
 8000834:	40021000 	.word	0x40021000

08000838 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000838:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000870 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800083c:	f7ff ffca 	bl	80007d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000840:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000842:	e003      	b.n	800084c <LoopCopyDataInit>

08000844 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000844:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000846:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000848:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800084a:	3104      	adds	r1, #4

0800084c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800084c:	480a      	ldr	r0, [pc, #40]	; (8000878 <LoopForever+0xa>)
	ldr	r3, =_edata
 800084e:	4b0b      	ldr	r3, [pc, #44]	; (800087c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000850:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000852:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000854:	d3f6      	bcc.n	8000844 <CopyDataInit>
	ldr	r2, =_sbss
 8000856:	4a0a      	ldr	r2, [pc, #40]	; (8000880 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000858:	e002      	b.n	8000860 <LoopFillZerobss>

0800085a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800085a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800085c:	f842 3b04 	str.w	r3, [r2], #4

08000860 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000860:	4b08      	ldr	r3, [pc, #32]	; (8000884 <LoopForever+0x16>)
	cmp	r2, r3
 8000862:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000864:	d3f9      	bcc.n	800085a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000866:	f002 fb1f 	bl	8002ea8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800086a:	f7ff fdbd 	bl	80003e8 <main>

0800086e <LoopForever>:

LoopForever:
    b LoopForever
 800086e:	e7fe      	b.n	800086e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000870:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000874:	08002f60 	.word	0x08002f60
	ldr	r0, =_sdata
 8000878:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800087c:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000880:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000884:	200000c8 	.word	0x200000c8

08000888 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000888:	e7fe      	b.n	8000888 <ADC1_2_IRQHandler>

0800088a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800088a:	b580      	push	{r7, lr}
 800088c:	b082      	sub	sp, #8
 800088e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000890:	2300      	movs	r3, #0
 8000892:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000894:	2003      	movs	r0, #3
 8000896:	f000 f943 	bl	8000b20 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800089a:	200f      	movs	r0, #15
 800089c:	f000 f80e 	bl	80008bc <HAL_InitTick>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d002      	beq.n	80008ac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80008a6:	2301      	movs	r3, #1
 80008a8:	71fb      	strb	r3, [r7, #7]
 80008aa:	e001      	b.n	80008b0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008ac:	f7ff fee6 	bl	800067c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008b0:	79fb      	ldrb	r3, [r7, #7]
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
	...

080008bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008c4:	2300      	movs	r3, #0
 80008c6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80008c8:	4b17      	ldr	r3, [pc, #92]	; (8000928 <HAL_InitTick+0x6c>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d023      	beq.n	8000918 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80008d0:	4b16      	ldr	r3, [pc, #88]	; (800092c <HAL_InitTick+0x70>)
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	4b14      	ldr	r3, [pc, #80]	; (8000928 <HAL_InitTick+0x6c>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	4619      	mov	r1, r3
 80008da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008de:	fbb3 f3f1 	udiv	r3, r3, r1
 80008e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008e6:	4618      	mov	r0, r3
 80008e8:	f000 f941 	bl	8000b6e <HAL_SYSTICK_Config>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d10f      	bne.n	8000912 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2b0f      	cmp	r3, #15
 80008f6:	d809      	bhi.n	800090c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008f8:	2200      	movs	r2, #0
 80008fa:	6879      	ldr	r1, [r7, #4]
 80008fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000900:	f000 f919 	bl	8000b36 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000904:	4a0a      	ldr	r2, [pc, #40]	; (8000930 <HAL_InitTick+0x74>)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	6013      	str	r3, [r2, #0]
 800090a:	e007      	b.n	800091c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800090c:	2301      	movs	r3, #1
 800090e:	73fb      	strb	r3, [r7, #15]
 8000910:	e004      	b.n	800091c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000912:	2301      	movs	r3, #1
 8000914:	73fb      	strb	r3, [r7, #15]
 8000916:	e001      	b.n	800091c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000918:	2301      	movs	r3, #1
 800091a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800091c:	7bfb      	ldrb	r3, [r7, #15]
}
 800091e:	4618      	mov	r0, r3
 8000920:	3710      	adds	r7, #16
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	20000008 	.word	0x20000008
 800092c:	20000000 	.word	0x20000000
 8000930:	20000004 	.word	0x20000004

08000934 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000938:	4b06      	ldr	r3, [pc, #24]	; (8000954 <HAL_IncTick+0x20>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	461a      	mov	r2, r3
 800093e:	4b06      	ldr	r3, [pc, #24]	; (8000958 <HAL_IncTick+0x24>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4413      	add	r3, r2
 8000944:	4a04      	ldr	r2, [pc, #16]	; (8000958 <HAL_IncTick+0x24>)
 8000946:	6013      	str	r3, [r2, #0]
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	20000008 	.word	0x20000008
 8000958:	200000c4 	.word	0x200000c4

0800095c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  return uwTick;
 8000960:	4b03      	ldr	r3, [pc, #12]	; (8000970 <HAL_GetTick+0x14>)
 8000962:	681b      	ldr	r3, [r3, #0]
}
 8000964:	4618      	mov	r0, r3
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	200000c4 	.word	0x200000c4

08000974 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800097c:	f7ff ffee 	bl	800095c <HAL_GetTick>
 8000980:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800098c:	d005      	beq.n	800099a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800098e:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <HAL_Delay+0x44>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	461a      	mov	r2, r3
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	4413      	add	r3, r2
 8000998:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800099a:	bf00      	nop
 800099c:	f7ff ffde 	bl	800095c <HAL_GetTick>
 80009a0:	4602      	mov	r2, r0
 80009a2:	68bb      	ldr	r3, [r7, #8]
 80009a4:	1ad3      	subs	r3, r2, r3
 80009a6:	68fa      	ldr	r2, [r7, #12]
 80009a8:	429a      	cmp	r2, r3
 80009aa:	d8f7      	bhi.n	800099c <HAL_Delay+0x28>
  {
  }
}
 80009ac:	bf00      	nop
 80009ae:	bf00      	nop
 80009b0:	3710      	adds	r7, #16
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20000008 	.word	0x20000008

080009bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009bc:	b480      	push	{r7}
 80009be:	b085      	sub	sp, #20
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	f003 0307 	and.w	r3, r3, #7
 80009ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009cc:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <__NVIC_SetPriorityGrouping+0x44>)
 80009ce:	68db      	ldr	r3, [r3, #12]
 80009d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009d2:	68ba      	ldr	r2, [r7, #8]
 80009d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009d8:	4013      	ands	r3, r2
 80009da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ee:	4a04      	ldr	r2, [pc, #16]	; (8000a00 <__NVIC_SetPriorityGrouping+0x44>)
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	60d3      	str	r3, [r2, #12]
}
 80009f4:	bf00      	nop
 80009f6:	3714      	adds	r7, #20
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr
 8000a00:	e000ed00 	.word	0xe000ed00

08000a04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a08:	4b04      	ldr	r3, [pc, #16]	; (8000a1c <__NVIC_GetPriorityGrouping+0x18>)
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	0a1b      	lsrs	r3, r3, #8
 8000a0e:	f003 0307 	and.w	r3, r3, #7
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr
 8000a1c:	e000ed00 	.word	0xe000ed00

08000a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	6039      	str	r1, [r7, #0]
 8000a2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	db0a      	blt.n	8000a4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	b2da      	uxtb	r2, r3
 8000a38:	490c      	ldr	r1, [pc, #48]	; (8000a6c <__NVIC_SetPriority+0x4c>)
 8000a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3e:	0112      	lsls	r2, r2, #4
 8000a40:	b2d2      	uxtb	r2, r2
 8000a42:	440b      	add	r3, r1
 8000a44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a48:	e00a      	b.n	8000a60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	b2da      	uxtb	r2, r3
 8000a4e:	4908      	ldr	r1, [pc, #32]	; (8000a70 <__NVIC_SetPriority+0x50>)
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	f003 030f 	and.w	r3, r3, #15
 8000a56:	3b04      	subs	r3, #4
 8000a58:	0112      	lsls	r2, r2, #4
 8000a5a:	b2d2      	uxtb	r2, r2
 8000a5c:	440b      	add	r3, r1
 8000a5e:	761a      	strb	r2, [r3, #24]
}
 8000a60:	bf00      	nop
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	e000e100 	.word	0xe000e100
 8000a70:	e000ed00 	.word	0xe000ed00

08000a74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b089      	sub	sp, #36	; 0x24
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	60f8      	str	r0, [r7, #12]
 8000a7c:	60b9      	str	r1, [r7, #8]
 8000a7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	f003 0307 	and.w	r3, r3, #7
 8000a86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a88:	69fb      	ldr	r3, [r7, #28]
 8000a8a:	f1c3 0307 	rsb	r3, r3, #7
 8000a8e:	2b04      	cmp	r3, #4
 8000a90:	bf28      	it	cs
 8000a92:	2304      	movcs	r3, #4
 8000a94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a96:	69fb      	ldr	r3, [r7, #28]
 8000a98:	3304      	adds	r3, #4
 8000a9a:	2b06      	cmp	r3, #6
 8000a9c:	d902      	bls.n	8000aa4 <NVIC_EncodePriority+0x30>
 8000a9e:	69fb      	ldr	r3, [r7, #28]
 8000aa0:	3b03      	subs	r3, #3
 8000aa2:	e000      	b.n	8000aa6 <NVIC_EncodePriority+0x32>
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8000aac:	69bb      	ldr	r3, [r7, #24]
 8000aae:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab2:	43da      	mvns	r2, r3
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	401a      	ands	r2, r3
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000abc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac6:	43d9      	mvns	r1, r3
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000acc:	4313      	orrs	r3, r2
         );
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3724      	adds	r7, #36	; 0x24
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
	...

08000adc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	3b01      	subs	r3, #1
 8000ae8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000aec:	d301      	bcc.n	8000af2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aee:	2301      	movs	r3, #1
 8000af0:	e00f      	b.n	8000b12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000af2:	4a0a      	ldr	r2, [pc, #40]	; (8000b1c <SysTick_Config+0x40>)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	3b01      	subs	r3, #1
 8000af8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000afa:	210f      	movs	r1, #15
 8000afc:	f04f 30ff 	mov.w	r0, #4294967295
 8000b00:	f7ff ff8e 	bl	8000a20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b04:	4b05      	ldr	r3, [pc, #20]	; (8000b1c <SysTick_Config+0x40>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b0a:	4b04      	ldr	r3, [pc, #16]	; (8000b1c <SysTick_Config+0x40>)
 8000b0c:	2207      	movs	r2, #7
 8000b0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b10:	2300      	movs	r3, #0
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	e000e010 	.word	0xe000e010

08000b20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b28:	6878      	ldr	r0, [r7, #4]
 8000b2a:	f7ff ff47 	bl	80009bc <__NVIC_SetPriorityGrouping>
}
 8000b2e:	bf00      	nop
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b086      	sub	sp, #24
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	60b9      	str	r1, [r7, #8]
 8000b40:	607a      	str	r2, [r7, #4]
 8000b42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b44:	2300      	movs	r3, #0
 8000b46:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b48:	f7ff ff5c 	bl	8000a04 <__NVIC_GetPriorityGrouping>
 8000b4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b4e:	687a      	ldr	r2, [r7, #4]
 8000b50:	68b9      	ldr	r1, [r7, #8]
 8000b52:	6978      	ldr	r0, [r7, #20]
 8000b54:	f7ff ff8e 	bl	8000a74 <NVIC_EncodePriority>
 8000b58:	4602      	mov	r2, r0
 8000b5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b5e:	4611      	mov	r1, r2
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff ff5d 	bl	8000a20 <__NVIC_SetPriority>
}
 8000b66:	bf00      	nop
 8000b68:	3718      	adds	r7, #24
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b082      	sub	sp, #8
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	f7ff ffb0 	bl	8000adc <SysTick_Config>
 8000b7c:	4603      	mov	r3, r0
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
	...

08000b88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b087      	sub	sp, #28
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b92:	2300      	movs	r3, #0
 8000b94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b96:	e17f      	b.n	8000e98 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	f000 8171 	beq.w	8000e92 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	d00b      	beq.n	8000bd0 <HAL_GPIO_Init+0x48>
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	2b02      	cmp	r3, #2
 8000bbe:	d007      	beq.n	8000bd0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bc4:	2b11      	cmp	r3, #17
 8000bc6:	d003      	beq.n	8000bd0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	2b12      	cmp	r3, #18
 8000bce:	d130      	bne.n	8000c32 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	689b      	ldr	r3, [r3, #8]
 8000bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	005b      	lsls	r3, r3, #1
 8000bda:	2203      	movs	r2, #3
 8000bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000be0:	43db      	mvns	r3, r3
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	4013      	ands	r3, r2
 8000be6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	68da      	ldr	r2, [r3, #12]
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf4:	693a      	ldr	r2, [r7, #16]
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	693a      	ldr	r2, [r7, #16]
 8000bfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c06:	2201      	movs	r2, #1
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0e:	43db      	mvns	r3, r3
 8000c10:	693a      	ldr	r2, [r7, #16]
 8000c12:	4013      	ands	r3, r2
 8000c14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	091b      	lsrs	r3, r3, #4
 8000c1c:	f003 0201 	and.w	r2, r3, #1
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	fa02 f303 	lsl.w	r3, r2, r3
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	f003 0303 	and.w	r3, r3, #3
 8000c3a:	2b03      	cmp	r3, #3
 8000c3c:	d118      	bne.n	8000c70 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000c44:	2201      	movs	r2, #1
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4c:	43db      	mvns	r3, r3
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	4013      	ands	r3, r2
 8000c52:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	08db      	lsrs	r3, r3, #3
 8000c5a:	f003 0201 	and.w	r2, r3, #1
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	fa02 f303 	lsl.w	r3, r2, r3
 8000c64:	693a      	ldr	r2, [r7, #16]
 8000c66:	4313      	orrs	r3, r2
 8000c68:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	693a      	ldr	r2, [r7, #16]
 8000c6e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	005b      	lsls	r3, r3, #1
 8000c7a:	2203      	movs	r2, #3
 8000c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c80:	43db      	mvns	r3, r3
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	4013      	ands	r3, r2
 8000c86:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	689a      	ldr	r2, [r3, #8]
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	fa02 f303 	lsl.w	r3, r2, r3
 8000c94:	693a      	ldr	r2, [r7, #16]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	2b02      	cmp	r3, #2
 8000ca6:	d003      	beq.n	8000cb0 <HAL_GPIO_Init+0x128>
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	2b12      	cmp	r3, #18
 8000cae:	d123      	bne.n	8000cf8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	08da      	lsrs	r2, r3, #3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	3208      	adds	r2, #8
 8000cb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	f003 0307 	and.w	r3, r3, #7
 8000cc4:	009b      	lsls	r3, r3, #2
 8000cc6:	220f      	movs	r2, #15
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	691a      	ldr	r2, [r3, #16]
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	f003 0307 	and.w	r3, r3, #7
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce4:	693a      	ldr	r2, [r7, #16]
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	08da      	lsrs	r2, r3, #3
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	3208      	adds	r2, #8
 8000cf2:	6939      	ldr	r1, [r7, #16]
 8000cf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	005b      	lsls	r3, r3, #1
 8000d02:	2203      	movs	r2, #3
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	43db      	mvns	r3, r3
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f003 0203 	and.w	r2, r3, #3
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	693a      	ldr	r2, [r7, #16]
 8000d22:	4313      	orrs	r3, r2
 8000d24:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	693a      	ldr	r2, [r7, #16]
 8000d2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	f000 80ac 	beq.w	8000e92 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d3a:	4b5f      	ldr	r3, [pc, #380]	; (8000eb8 <HAL_GPIO_Init+0x330>)
 8000d3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d3e:	4a5e      	ldr	r2, [pc, #376]	; (8000eb8 <HAL_GPIO_Init+0x330>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	6613      	str	r3, [r2, #96]	; 0x60
 8000d46:	4b5c      	ldr	r3, [pc, #368]	; (8000eb8 <HAL_GPIO_Init+0x330>)
 8000d48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	60bb      	str	r3, [r7, #8]
 8000d50:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d52:	4a5a      	ldr	r2, [pc, #360]	; (8000ebc <HAL_GPIO_Init+0x334>)
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	089b      	lsrs	r3, r3, #2
 8000d58:	3302      	adds	r3, #2
 8000d5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	f003 0303 	and.w	r3, r3, #3
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	220f      	movs	r2, #15
 8000d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6e:	43db      	mvns	r3, r3
 8000d70:	693a      	ldr	r2, [r7, #16]
 8000d72:	4013      	ands	r3, r2
 8000d74:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d7c:	d025      	beq.n	8000dca <HAL_GPIO_Init+0x242>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a4f      	ldr	r2, [pc, #316]	; (8000ec0 <HAL_GPIO_Init+0x338>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d01f      	beq.n	8000dc6 <HAL_GPIO_Init+0x23e>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a4e      	ldr	r2, [pc, #312]	; (8000ec4 <HAL_GPIO_Init+0x33c>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d019      	beq.n	8000dc2 <HAL_GPIO_Init+0x23a>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a4d      	ldr	r2, [pc, #308]	; (8000ec8 <HAL_GPIO_Init+0x340>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d013      	beq.n	8000dbe <HAL_GPIO_Init+0x236>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a4c      	ldr	r2, [pc, #304]	; (8000ecc <HAL_GPIO_Init+0x344>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d00d      	beq.n	8000dba <HAL_GPIO_Init+0x232>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a4b      	ldr	r2, [pc, #300]	; (8000ed0 <HAL_GPIO_Init+0x348>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d007      	beq.n	8000db6 <HAL_GPIO_Init+0x22e>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4a4a      	ldr	r2, [pc, #296]	; (8000ed4 <HAL_GPIO_Init+0x34c>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d101      	bne.n	8000db2 <HAL_GPIO_Init+0x22a>
 8000dae:	2306      	movs	r3, #6
 8000db0:	e00c      	b.n	8000dcc <HAL_GPIO_Init+0x244>
 8000db2:	2307      	movs	r3, #7
 8000db4:	e00a      	b.n	8000dcc <HAL_GPIO_Init+0x244>
 8000db6:	2305      	movs	r3, #5
 8000db8:	e008      	b.n	8000dcc <HAL_GPIO_Init+0x244>
 8000dba:	2304      	movs	r3, #4
 8000dbc:	e006      	b.n	8000dcc <HAL_GPIO_Init+0x244>
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	e004      	b.n	8000dcc <HAL_GPIO_Init+0x244>
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	e002      	b.n	8000dcc <HAL_GPIO_Init+0x244>
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e000      	b.n	8000dcc <HAL_GPIO_Init+0x244>
 8000dca:	2300      	movs	r3, #0
 8000dcc:	697a      	ldr	r2, [r7, #20]
 8000dce:	f002 0203 	and.w	r2, r2, #3
 8000dd2:	0092      	lsls	r2, r2, #2
 8000dd4:	4093      	lsls	r3, r2
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ddc:	4937      	ldr	r1, [pc, #220]	; (8000ebc <HAL_GPIO_Init+0x334>)
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	089b      	lsrs	r3, r3, #2
 8000de2:	3302      	adds	r3, #2
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000dea:	4b3b      	ldr	r3, [pc, #236]	; (8000ed8 <HAL_GPIO_Init+0x350>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	43db      	mvns	r3, r3
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	4013      	ands	r3, r2
 8000df8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d003      	beq.n	8000e0e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e0e:	4a32      	ldr	r2, [pc, #200]	; (8000ed8 <HAL_GPIO_Init+0x350>)
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000e14:	4b30      	ldr	r3, [pc, #192]	; (8000ed8 <HAL_GPIO_Init+0x350>)
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	4013      	ands	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d003      	beq.n	8000e38 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e38:	4a27      	ldr	r2, [pc, #156]	; (8000ed8 <HAL_GPIO_Init+0x350>)
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e3e:	4b26      	ldr	r3, [pc, #152]	; (8000ed8 <HAL_GPIO_Init+0x350>)
 8000e40:	689b      	ldr	r3, [r3, #8]
 8000e42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	43db      	mvns	r3, r3
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d003      	beq.n	8000e62 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e62:	4a1d      	ldr	r2, [pc, #116]	; (8000ed8 <HAL_GPIO_Init+0x350>)
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000e68:	4b1b      	ldr	r3, [pc, #108]	; (8000ed8 <HAL_GPIO_Init+0x350>)
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	43db      	mvns	r3, r3
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	4013      	ands	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d003      	beq.n	8000e8c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e8c:	4a12      	ldr	r2, [pc, #72]	; (8000ed8 <HAL_GPIO_Init+0x350>)
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	3301      	adds	r3, #1
 8000e96:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	fa22 f303 	lsr.w	r3, r2, r3
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	f47f ae78 	bne.w	8000b98 <HAL_GPIO_Init+0x10>
  }
}
 8000ea8:	bf00      	nop
 8000eaa:	bf00      	nop
 8000eac:	371c      	adds	r7, #28
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	40021000 	.word	0x40021000
 8000ebc:	40010000 	.word	0x40010000
 8000ec0:	48000400 	.word	0x48000400
 8000ec4:	48000800 	.word	0x48000800
 8000ec8:	48000c00 	.word	0x48000c00
 8000ecc:	48001000 	.word	0x48001000
 8000ed0:	48001400 	.word	0x48001400
 8000ed4:	48001800 	.word	0x48001800
 8000ed8:	40010400 	.word	0x40010400

08000edc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d101      	bne.n	8000eee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	e081      	b.n	8000ff2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d106      	bne.n	8000f08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2200      	movs	r2, #0
 8000efe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f7ff fbde 	bl	80006c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2224      	movs	r2, #36	; 0x24
 8000f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f022 0201 	bic.w	r2, r2, #1
 8000f1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	685a      	ldr	r2, [r3, #4]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000f2c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	689a      	ldr	r2, [r3, #8]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f3c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	68db      	ldr	r3, [r3, #12]
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d107      	bne.n	8000f56 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	689a      	ldr	r2, [r3, #8]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	e006      	b.n	8000f64 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	689a      	ldr	r2, [r3, #8]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000f62:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d104      	bne.n	8000f76 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f74:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	687a      	ldr	r2, [r7, #4]
 8000f7e:	6812      	ldr	r2, [r2, #0]
 8000f80:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f88:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	68da      	ldr	r2, [r3, #12]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f98:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	691a      	ldr	r2, [r3, #16]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	695b      	ldr	r3, [r3, #20]
 8000fa2:	ea42 0103 	orr.w	r1, r2, r3
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	699b      	ldr	r3, [r3, #24]
 8000faa:	021a      	lsls	r2, r3, #8
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	430a      	orrs	r2, r1
 8000fb2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	69d9      	ldr	r1, [r3, #28]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6a1a      	ldr	r2, [r3, #32]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	430a      	orrs	r2, r1
 8000fc2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f042 0201 	orr.w	r2, r2, #1
 8000fd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2220      	movs	r2, #32
 8000fde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2200      	movs	r2, #0
 8000fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000ff0:	2300      	movs	r3, #0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
	...

08000ffc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b088      	sub	sp, #32
 8001000:	af02      	add	r7, sp, #8
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	607a      	str	r2, [r7, #4]
 8001006:	461a      	mov	r2, r3
 8001008:	460b      	mov	r3, r1
 800100a:	817b      	strh	r3, [r7, #10]
 800100c:	4613      	mov	r3, r2
 800100e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001016:	b2db      	uxtb	r3, r3
 8001018:	2b20      	cmp	r3, #32
 800101a:	f040 80da 	bne.w	80011d2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001024:	2b01      	cmp	r3, #1
 8001026:	d101      	bne.n	800102c <HAL_I2C_Master_Transmit+0x30>
 8001028:	2302      	movs	r3, #2
 800102a:	e0d3      	b.n	80011d4 <HAL_I2C_Master_Transmit+0x1d8>
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	2201      	movs	r2, #1
 8001030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001034:	f7ff fc92 	bl	800095c <HAL_GetTick>
 8001038:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	2319      	movs	r3, #25
 8001040:	2201      	movs	r2, #1
 8001042:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001046:	68f8      	ldr	r0, [r7, #12]
 8001048:	f000 f9e6 	bl	8001418 <I2C_WaitOnFlagUntilTimeout>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e0be      	b.n	80011d4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	2221      	movs	r2, #33	; 0x21
 800105a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	2210      	movs	r2, #16
 8001062:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	2200      	movs	r2, #0
 800106a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	893a      	ldrh	r2, [r7, #8]
 8001076:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	2200      	movs	r2, #0
 800107c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001082:	b29b      	uxth	r3, r3
 8001084:	2bff      	cmp	r3, #255	; 0xff
 8001086:	d90e      	bls.n	80010a6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	22ff      	movs	r2, #255	; 0xff
 800108c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001092:	b2da      	uxtb	r2, r3
 8001094:	8979      	ldrh	r1, [r7, #10]
 8001096:	4b51      	ldr	r3, [pc, #324]	; (80011dc <HAL_I2C_Master_Transmit+0x1e0>)
 8001098:	9300      	str	r3, [sp, #0]
 800109a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800109e:	68f8      	ldr	r0, [r7, #12]
 80010a0:	f000 fb48 	bl	8001734 <I2C_TransferConfig>
 80010a4:	e06c      	b.n	8001180 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010b4:	b2da      	uxtb	r2, r3
 80010b6:	8979      	ldrh	r1, [r7, #10]
 80010b8:	4b48      	ldr	r3, [pc, #288]	; (80011dc <HAL_I2C_Master_Transmit+0x1e0>)
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010c0:	68f8      	ldr	r0, [r7, #12]
 80010c2:	f000 fb37 	bl	8001734 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80010c6:	e05b      	b.n	8001180 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80010c8:	697a      	ldr	r2, [r7, #20]
 80010ca:	6a39      	ldr	r1, [r7, #32]
 80010cc:	68f8      	ldr	r0, [r7, #12]
 80010ce:	f000 f9e3 	bl	8001498 <I2C_WaitOnTXISFlagUntilTimeout>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	e07b      	b.n	80011d4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e0:	781a      	ldrb	r2, [r3, #0]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ec:	1c5a      	adds	r2, r3, #1
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	3b01      	subs	r3, #1
 80010fa:	b29a      	uxth	r2, r3
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001104:	3b01      	subs	r3, #1
 8001106:	b29a      	uxth	r2, r3
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001110:	b29b      	uxth	r3, r3
 8001112:	2b00      	cmp	r3, #0
 8001114:	d034      	beq.n	8001180 <HAL_I2C_Master_Transmit+0x184>
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800111a:	2b00      	cmp	r3, #0
 800111c:	d130      	bne.n	8001180 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	6a3b      	ldr	r3, [r7, #32]
 8001124:	2200      	movs	r2, #0
 8001126:	2180      	movs	r1, #128	; 0x80
 8001128:	68f8      	ldr	r0, [r7, #12]
 800112a:	f000 f975 	bl	8001418 <I2C_WaitOnFlagUntilTimeout>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001134:	2301      	movs	r3, #1
 8001136:	e04d      	b.n	80011d4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800113c:	b29b      	uxth	r3, r3
 800113e:	2bff      	cmp	r3, #255	; 0xff
 8001140:	d90e      	bls.n	8001160 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	22ff      	movs	r2, #255	; 0xff
 8001146:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800114c:	b2da      	uxtb	r2, r3
 800114e:	8979      	ldrh	r1, [r7, #10]
 8001150:	2300      	movs	r3, #0
 8001152:	9300      	str	r3, [sp, #0]
 8001154:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001158:	68f8      	ldr	r0, [r7, #12]
 800115a:	f000 faeb 	bl	8001734 <I2C_TransferConfig>
 800115e:	e00f      	b.n	8001180 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001164:	b29a      	uxth	r2, r3
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800116e:	b2da      	uxtb	r2, r3
 8001170:	8979      	ldrh	r1, [r7, #10]
 8001172:	2300      	movs	r3, #0
 8001174:	9300      	str	r3, [sp, #0]
 8001176:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800117a:	68f8      	ldr	r0, [r7, #12]
 800117c:	f000 fada 	bl	8001734 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001184:	b29b      	uxth	r3, r3
 8001186:	2b00      	cmp	r3, #0
 8001188:	d19e      	bne.n	80010c8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800118a:	697a      	ldr	r2, [r7, #20]
 800118c:	6a39      	ldr	r1, [r7, #32]
 800118e:	68f8      	ldr	r0, [r7, #12]
 8001190:	f000 f9c2 	bl	8001518 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e01a      	b.n	80011d4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2220      	movs	r2, #32
 80011a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	6859      	ldr	r1, [r3, #4]
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	4b0b      	ldr	r3, [pc, #44]	; (80011e0 <HAL_I2C_Master_Transmit+0x1e4>)
 80011b2:	400b      	ands	r3, r1
 80011b4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	2220      	movs	r2, #32
 80011ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	2200      	movs	r2, #0
 80011c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	2200      	movs	r2, #0
 80011ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80011ce:	2300      	movs	r3, #0
 80011d0:	e000      	b.n	80011d4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80011d2:	2302      	movs	r3, #2
  }
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3718      	adds	r7, #24
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	80002000 	.word	0x80002000
 80011e0:	fe00e800 	.word	0xfe00e800

080011e4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b088      	sub	sp, #32
 80011e8:	af02      	add	r7, sp, #8
 80011ea:	60f8      	str	r0, [r7, #12]
 80011ec:	607a      	str	r2, [r7, #4]
 80011ee:	461a      	mov	r2, r3
 80011f0:	460b      	mov	r3, r1
 80011f2:	817b      	strh	r3, [r7, #10]
 80011f4:	4613      	mov	r3, r2
 80011f6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	2b20      	cmp	r3, #32
 8001202:	f040 80db 	bne.w	80013bc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800120c:	2b01      	cmp	r3, #1
 800120e:	d101      	bne.n	8001214 <HAL_I2C_Master_Receive+0x30>
 8001210:	2302      	movs	r3, #2
 8001212:	e0d4      	b.n	80013be <HAL_I2C_Master_Receive+0x1da>
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	2201      	movs	r2, #1
 8001218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800121c:	f7ff fb9e 	bl	800095c <HAL_GetTick>
 8001220:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	2319      	movs	r3, #25
 8001228:	2201      	movs	r2, #1
 800122a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800122e:	68f8      	ldr	r0, [r7, #12]
 8001230:	f000 f8f2 	bl	8001418 <I2C_WaitOnFlagUntilTimeout>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e0bf      	b.n	80013be <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	2222      	movs	r2, #34	; 0x22
 8001242:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	2210      	movs	r2, #16
 800124a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	2200      	movs	r2, #0
 8001252:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	893a      	ldrh	r2, [r7, #8]
 800125e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	2200      	movs	r2, #0
 8001264:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800126a:	b29b      	uxth	r3, r3
 800126c:	2bff      	cmp	r3, #255	; 0xff
 800126e:	d90e      	bls.n	800128e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	22ff      	movs	r2, #255	; 0xff
 8001274:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800127a:	b2da      	uxtb	r2, r3
 800127c:	8979      	ldrh	r1, [r7, #10]
 800127e:	4b52      	ldr	r3, [pc, #328]	; (80013c8 <HAL_I2C_Master_Receive+0x1e4>)
 8001280:	9300      	str	r3, [sp, #0]
 8001282:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001286:	68f8      	ldr	r0, [r7, #12]
 8001288:	f000 fa54 	bl	8001734 <I2C_TransferConfig>
 800128c:	e06d      	b.n	800136a <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001292:	b29a      	uxth	r2, r3
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800129c:	b2da      	uxtb	r2, r3
 800129e:	8979      	ldrh	r1, [r7, #10]
 80012a0:	4b49      	ldr	r3, [pc, #292]	; (80013c8 <HAL_I2C_Master_Receive+0x1e4>)
 80012a2:	9300      	str	r3, [sp, #0]
 80012a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012a8:	68f8      	ldr	r0, [r7, #12]
 80012aa:	f000 fa43 	bl	8001734 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80012ae:	e05c      	b.n	800136a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012b0:	697a      	ldr	r2, [r7, #20]
 80012b2:	6a39      	ldr	r1, [r7, #32]
 80012b4:	68f8      	ldr	r0, [r7, #12]
 80012b6:	f000 f96b 	bl	8001590 <I2C_WaitOnRXNEFlagUntilTimeout>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	e07c      	b.n	80013be <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ce:	b2d2      	uxtb	r2, r2
 80012d0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d6:	1c5a      	adds	r2, r3, #1
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012e0:	3b01      	subs	r3, #1
 80012e2:	b29a      	uxth	r2, r3
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	3b01      	subs	r3, #1
 80012f0:	b29a      	uxth	r2, r3
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d034      	beq.n	800136a <HAL_I2C_Master_Receive+0x186>
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001304:	2b00      	cmp	r3, #0
 8001306:	d130      	bne.n	800136a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	6a3b      	ldr	r3, [r7, #32]
 800130e:	2200      	movs	r2, #0
 8001310:	2180      	movs	r1, #128	; 0x80
 8001312:	68f8      	ldr	r0, [r7, #12]
 8001314:	f000 f880 	bl	8001418 <I2C_WaitOnFlagUntilTimeout>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e04d      	b.n	80013be <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001326:	b29b      	uxth	r3, r3
 8001328:	2bff      	cmp	r3, #255	; 0xff
 800132a:	d90e      	bls.n	800134a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	22ff      	movs	r2, #255	; 0xff
 8001330:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001336:	b2da      	uxtb	r2, r3
 8001338:	8979      	ldrh	r1, [r7, #10]
 800133a:	2300      	movs	r3, #0
 800133c:	9300      	str	r3, [sp, #0]
 800133e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001342:	68f8      	ldr	r0, [r7, #12]
 8001344:	f000 f9f6 	bl	8001734 <I2C_TransferConfig>
 8001348:	e00f      	b.n	800136a <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800134e:	b29a      	uxth	r2, r3
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001358:	b2da      	uxtb	r2, r3
 800135a:	8979      	ldrh	r1, [r7, #10]
 800135c:	2300      	movs	r3, #0
 800135e:	9300      	str	r3, [sp, #0]
 8001360:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001364:	68f8      	ldr	r0, [r7, #12]
 8001366:	f000 f9e5 	bl	8001734 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800136e:	b29b      	uxth	r3, r3
 8001370:	2b00      	cmp	r3, #0
 8001372:	d19d      	bne.n	80012b0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001374:	697a      	ldr	r2, [r7, #20]
 8001376:	6a39      	ldr	r1, [r7, #32]
 8001378:	68f8      	ldr	r0, [r7, #12]
 800137a:	f000 f8cd 	bl	8001518 <I2C_WaitOnSTOPFlagUntilTimeout>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e01a      	b.n	80013be <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2220      	movs	r2, #32
 800138e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	6859      	ldr	r1, [r3, #4]
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <HAL_I2C_Master_Receive+0x1e8>)
 800139c:	400b      	ands	r3, r1
 800139e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	2220      	movs	r2, #32
 80013a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	2200      	movs	r2, #0
 80013ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	2200      	movs	r2, #0
 80013b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80013b8:	2300      	movs	r3, #0
 80013ba:	e000      	b.n	80013be <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80013bc:	2302      	movs	r3, #2
  }
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3718      	adds	r7, #24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	80002400 	.word	0x80002400
 80013cc:	fe00e800 	.word	0xfe00e800

080013d0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	699b      	ldr	r3, [r3, #24]
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d103      	bne.n	80013ee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2200      	movs	r2, #0
 80013ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	f003 0301 	and.w	r3, r3, #1
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d007      	beq.n	800140c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	699a      	ldr	r2, [r3, #24]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f042 0201 	orr.w	r2, r2, #1
 800140a:	619a      	str	r2, [r3, #24]
  }
}
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	603b      	str	r3, [r7, #0]
 8001424:	4613      	mov	r3, r2
 8001426:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001428:	e022      	b.n	8001470 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001430:	d01e      	beq.n	8001470 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001432:	f7ff fa93 	bl	800095c <HAL_GetTick>
 8001436:	4602      	mov	r2, r0
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	683a      	ldr	r2, [r7, #0]
 800143e:	429a      	cmp	r2, r3
 8001440:	d302      	bcc.n	8001448 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d113      	bne.n	8001470 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144c:	f043 0220 	orr.w	r2, r3, #32
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2220      	movs	r2, #32
 8001458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	2200      	movs	r2, #0
 8001460:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	2200      	movs	r2, #0
 8001468:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e00f      	b.n	8001490 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	699a      	ldr	r2, [r3, #24]
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	4013      	ands	r3, r2
 800147a:	68ba      	ldr	r2, [r7, #8]
 800147c:	429a      	cmp	r2, r3
 800147e:	bf0c      	ite	eq
 8001480:	2301      	moveq	r3, #1
 8001482:	2300      	movne	r3, #0
 8001484:	b2db      	uxtb	r3, r3
 8001486:	461a      	mov	r2, r3
 8001488:	79fb      	ldrb	r3, [r7, #7]
 800148a:	429a      	cmp	r2, r3
 800148c:	d0cd      	beq.n	800142a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800148e:	2300      	movs	r3, #0
}
 8001490:	4618      	mov	r0, r3
 8001492:	3710      	adds	r7, #16
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}

08001498 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80014a4:	e02c      	b.n	8001500 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	68b9      	ldr	r1, [r7, #8]
 80014aa:	68f8      	ldr	r0, [r7, #12]
 80014ac:	f000 f8dc 	bl	8001668 <I2C_IsAcknowledgeFailed>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e02a      	b.n	8001510 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014c0:	d01e      	beq.n	8001500 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014c2:	f7ff fa4b 	bl	800095c <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	68ba      	ldr	r2, [r7, #8]
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d302      	bcc.n	80014d8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d113      	bne.n	8001500 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014dc:	f043 0220 	orr.w	r2, r3, #32
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	2220      	movs	r2, #32
 80014e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2200      	movs	r2, #0
 80014f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2200      	movs	r2, #0
 80014f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e007      	b.n	8001510 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	699b      	ldr	r3, [r3, #24]
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	2b02      	cmp	r3, #2
 800150c:	d1cb      	bne.n	80014a6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800150e:	2300      	movs	r3, #0
}
 8001510:	4618      	mov	r0, r3
 8001512:	3710      	adds	r7, #16
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001524:	e028      	b.n	8001578 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	68b9      	ldr	r1, [r7, #8]
 800152a:	68f8      	ldr	r0, [r7, #12]
 800152c:	f000 f89c 	bl	8001668 <I2C_IsAcknowledgeFailed>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e026      	b.n	8001588 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800153a:	f7ff fa0f 	bl	800095c <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	68ba      	ldr	r2, [r7, #8]
 8001546:	429a      	cmp	r2, r3
 8001548:	d302      	bcc.n	8001550 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d113      	bne.n	8001578 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001554:	f043 0220 	orr.w	r2, r3, #32
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	2220      	movs	r2, #32
 8001560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	2200      	movs	r2, #0
 8001568:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	2200      	movs	r2, #0
 8001570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e007      	b.n	8001588 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	699b      	ldr	r3, [r3, #24]
 800157e:	f003 0320 	and.w	r3, r3, #32
 8001582:	2b20      	cmp	r3, #32
 8001584:	d1cf      	bne.n	8001526 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001586:	2300      	movs	r3, #0
}
 8001588:	4618      	mov	r0, r3
 800158a:	3710      	adds	r7, #16
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800159c:	e055      	b.n	800164a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	68b9      	ldr	r1, [r7, #8]
 80015a2:	68f8      	ldr	r0, [r7, #12]
 80015a4:	f000 f860 	bl	8001668 <I2C_IsAcknowledgeFailed>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e053      	b.n	800165a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	f003 0320 	and.w	r3, r3, #32
 80015bc:	2b20      	cmp	r3, #32
 80015be:	d129      	bne.n	8001614 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	699b      	ldr	r3, [r3, #24]
 80015c6:	f003 0304 	and.w	r3, r3, #4
 80015ca:	2b04      	cmp	r3, #4
 80015cc:	d105      	bne.n	80015da <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80015d6:	2300      	movs	r3, #0
 80015d8:	e03f      	b.n	800165a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2220      	movs	r2, #32
 80015e0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	6859      	ldr	r1, [r3, #4]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	4b1d      	ldr	r3, [pc, #116]	; (8001664 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80015ee:	400b      	ands	r3, r1
 80015f0:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	2200      	movs	r2, #0
 80015f6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2220      	movs	r2, #32
 80015fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	2200      	movs	r2, #0
 8001604:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2200      	movs	r2, #0
 800160c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e022      	b.n	800165a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001614:	f7ff f9a2 	bl	800095c <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	68ba      	ldr	r2, [r7, #8]
 8001620:	429a      	cmp	r2, r3
 8001622:	d302      	bcc.n	800162a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d10f      	bne.n	800164a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162e:	f043 0220 	orr.w	r2, r3, #32
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	2220      	movs	r2, #32
 800163a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	2200      	movs	r2, #0
 8001642:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e007      	b.n	800165a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	f003 0304 	and.w	r3, r3, #4
 8001654:	2b04      	cmp	r3, #4
 8001656:	d1a2      	bne.n	800159e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	fe00e800 	.word	0xfe00e800

08001668 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	f003 0310 	and.w	r3, r3, #16
 800167e:	2b10      	cmp	r3, #16
 8001680:	d151      	bne.n	8001726 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001682:	e022      	b.n	80016ca <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800168a:	d01e      	beq.n	80016ca <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800168c:	f7ff f966 	bl	800095c <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	68ba      	ldr	r2, [r7, #8]
 8001698:	429a      	cmp	r2, r3
 800169a:	d302      	bcc.n	80016a2 <I2C_IsAcknowledgeFailed+0x3a>
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d113      	bne.n	80016ca <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a6:	f043 0220 	orr.w	r2, r3, #32
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2220      	movs	r2, #32
 80016b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2200      	movs	r2, #0
 80016ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	2200      	movs	r2, #0
 80016c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e02e      	b.n	8001728 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	f003 0320 	and.w	r3, r3, #32
 80016d4:	2b20      	cmp	r3, #32
 80016d6:	d1d5      	bne.n	8001684 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2210      	movs	r2, #16
 80016de:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2220      	movs	r2, #32
 80016e6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80016e8:	68f8      	ldr	r0, [r7, #12]
 80016ea:	f7ff fe71 	bl	80013d0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	6859      	ldr	r1, [r3, #4]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	4b0d      	ldr	r3, [pc, #52]	; (8001730 <I2C_IsAcknowledgeFailed+0xc8>)
 80016fa:	400b      	ands	r3, r1
 80016fc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001702:	f043 0204 	orr.w	r2, r3, #4
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	2220      	movs	r2, #32
 800170e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	2200      	movs	r2, #0
 8001716:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	2200      	movs	r2, #0
 800171e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e000      	b.n	8001728 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001726:	2300      	movs	r3, #0
}
 8001728:	4618      	mov	r0, r3
 800172a:	3710      	adds	r7, #16
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	fe00e800 	.word	0xfe00e800

08001734 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	607b      	str	r3, [r7, #4]
 800173e:	460b      	mov	r3, r1
 8001740:	817b      	strh	r3, [r7, #10]
 8001742:	4613      	mov	r3, r2
 8001744:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	685a      	ldr	r2, [r3, #4]
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	0d5b      	lsrs	r3, r3, #21
 8001750:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001754:	4b0d      	ldr	r3, [pc, #52]	; (800178c <I2C_TransferConfig+0x58>)
 8001756:	430b      	orrs	r3, r1
 8001758:	43db      	mvns	r3, r3
 800175a:	ea02 0103 	and.w	r1, r2, r3
 800175e:	897b      	ldrh	r3, [r7, #10]
 8001760:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001764:	7a7b      	ldrb	r3, [r7, #9]
 8001766:	041b      	lsls	r3, r3, #16
 8001768:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800176c:	431a      	orrs	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	431a      	orrs	r2, r3
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	431a      	orrs	r2, r3
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	430a      	orrs	r2, r1
 800177c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800177e:	bf00      	nop
 8001780:	3714      	adds	r7, #20
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	03ff63ff 	.word	0x03ff63ff

08001790 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b20      	cmp	r3, #32
 80017a4:	d138      	bne.n	8001818 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d101      	bne.n	80017b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80017b0:	2302      	movs	r3, #2
 80017b2:	e032      	b.n	800181a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2201      	movs	r2, #1
 80017b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2224      	movs	r2, #36	; 0x24
 80017c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f022 0201 	bic.w	r2, r2, #1
 80017d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80017e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	6819      	ldr	r1, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	683a      	ldr	r2, [r7, #0]
 80017f0:	430a      	orrs	r2, r1
 80017f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f042 0201 	orr.w	r2, r2, #1
 8001802:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2220      	movs	r2, #32
 8001808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2200      	movs	r2, #0
 8001810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001814:	2300      	movs	r3, #0
 8001816:	e000      	b.n	800181a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001818:	2302      	movs	r3, #2
  }
}
 800181a:	4618      	mov	r0, r3
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001826:	b480      	push	{r7}
 8001828:	b085      	sub	sp, #20
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
 800182e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001836:	b2db      	uxtb	r3, r3
 8001838:	2b20      	cmp	r3, #32
 800183a:	d139      	bne.n	80018b0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001842:	2b01      	cmp	r3, #1
 8001844:	d101      	bne.n	800184a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001846:	2302      	movs	r3, #2
 8001848:	e033      	b.n	80018b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2201      	movs	r2, #1
 800184e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2224      	movs	r2, #36	; 0x24
 8001856:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f022 0201 	bic.w	r2, r2, #1
 8001868:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001878:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	021b      	lsls	r3, r3, #8
 800187e:	68fa      	ldr	r2, [r7, #12]
 8001880:	4313      	orrs	r3, r2
 8001882:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	68fa      	ldr	r2, [r7, #12]
 800188a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f042 0201 	orr.w	r2, r2, #1
 800189a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2220      	movs	r2, #32
 80018a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80018ac:	2300      	movs	r3, #0
 80018ae:	e000      	b.n	80018b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80018b0:	2302      	movs	r3, #2
  }
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3714      	adds	r7, #20
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
	...

080018c0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018c4:	4b05      	ldr	r3, [pc, #20]	; (80018dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a04      	ldr	r2, [pc, #16]	; (80018dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80018ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ce:	6013      	str	r3, [r2, #0]
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	40007000 	.word	0x40007000

080018e0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80018e4:	4b04      	ldr	r3, [pc, #16]	; (80018f8 <HAL_PWREx_GetVoltageRange+0x18>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	40007000 	.word	0x40007000

080018fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800190a:	d130      	bne.n	800196e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800190c:	4b23      	ldr	r3, [pc, #140]	; (800199c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001914:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001918:	d038      	beq.n	800198c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800191a:	4b20      	ldr	r3, [pc, #128]	; (800199c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001922:	4a1e      	ldr	r2, [pc, #120]	; (800199c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001924:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001928:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800192a:	4b1d      	ldr	r3, [pc, #116]	; (80019a0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2232      	movs	r2, #50	; 0x32
 8001930:	fb02 f303 	mul.w	r3, r2, r3
 8001934:	4a1b      	ldr	r2, [pc, #108]	; (80019a4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001936:	fba2 2303 	umull	r2, r3, r2, r3
 800193a:	0c9b      	lsrs	r3, r3, #18
 800193c:	3301      	adds	r3, #1
 800193e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001940:	e002      	b.n	8001948 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	3b01      	subs	r3, #1
 8001946:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001948:	4b14      	ldr	r3, [pc, #80]	; (800199c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800194a:	695b      	ldr	r3, [r3, #20]
 800194c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001950:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001954:	d102      	bne.n	800195c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d1f2      	bne.n	8001942 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800195c:	4b0f      	ldr	r3, [pc, #60]	; (800199c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800195e:	695b      	ldr	r3, [r3, #20]
 8001960:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001964:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001968:	d110      	bne.n	800198c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e00f      	b.n	800198e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800196e:	4b0b      	ldr	r3, [pc, #44]	; (800199c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001976:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800197a:	d007      	beq.n	800198c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800197c:	4b07      	ldr	r3, [pc, #28]	; (800199c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001984:	4a05      	ldr	r2, [pc, #20]	; (800199c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001986:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800198a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3714      	adds	r7, #20
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	40007000 	.word	0x40007000
 80019a0:	20000000 	.word	0x20000000
 80019a4:	431bde83 	.word	0x431bde83

080019a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b088      	sub	sp, #32
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d101      	bne.n	80019ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e3d4      	b.n	8002164 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019ba:	4ba1      	ldr	r3, [pc, #644]	; (8001c40 <HAL_RCC_OscConfig+0x298>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f003 030c 	and.w	r3, r3, #12
 80019c2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019c4:	4b9e      	ldr	r3, [pc, #632]	; (8001c40 <HAL_RCC_OscConfig+0x298>)
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	f003 0303 	and.w	r3, r3, #3
 80019cc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0310 	and.w	r3, r3, #16
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f000 80e4 	beq.w	8001ba4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d007      	beq.n	80019f2 <HAL_RCC_OscConfig+0x4a>
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	2b0c      	cmp	r3, #12
 80019e6:	f040 808b 	bne.w	8001b00 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	f040 8087 	bne.w	8001b00 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019f2:	4b93      	ldr	r3, [pc, #588]	; (8001c40 <HAL_RCC_OscConfig+0x298>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d005      	beq.n	8001a0a <HAL_RCC_OscConfig+0x62>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d101      	bne.n	8001a0a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e3ac      	b.n	8002164 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a1a      	ldr	r2, [r3, #32]
 8001a0e:	4b8c      	ldr	r3, [pc, #560]	; (8001c40 <HAL_RCC_OscConfig+0x298>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0308 	and.w	r3, r3, #8
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d004      	beq.n	8001a24 <HAL_RCC_OscConfig+0x7c>
 8001a1a:	4b89      	ldr	r3, [pc, #548]	; (8001c40 <HAL_RCC_OscConfig+0x298>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a22:	e005      	b.n	8001a30 <HAL_RCC_OscConfig+0x88>
 8001a24:	4b86      	ldr	r3, [pc, #536]	; (8001c40 <HAL_RCC_OscConfig+0x298>)
 8001a26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a2a:	091b      	lsrs	r3, r3, #4
 8001a2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d223      	bcs.n	8001a7c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a1b      	ldr	r3, [r3, #32]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f000 fd09 	bl	8002450 <RCC_SetFlashLatencyFromMSIRange>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e38d      	b.n	8002164 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a48:	4b7d      	ldr	r3, [pc, #500]	; (8001c40 <HAL_RCC_OscConfig+0x298>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a7c      	ldr	r2, [pc, #496]	; (8001c40 <HAL_RCC_OscConfig+0x298>)
 8001a4e:	f043 0308 	orr.w	r3, r3, #8
 8001a52:	6013      	str	r3, [r2, #0]
 8001a54:	4b7a      	ldr	r3, [pc, #488]	; (8001c40 <HAL_RCC_OscConfig+0x298>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a1b      	ldr	r3, [r3, #32]
 8001a60:	4977      	ldr	r1, [pc, #476]	; (8001c40 <HAL_RCC_OscConfig+0x298>)
 8001a62:	4313      	orrs	r3, r2
 8001a64:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a66:	4b76      	ldr	r3, [pc, #472]	; (8001c40 <HAL_RCC_OscConfig+0x298>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	69db      	ldr	r3, [r3, #28]
 8001a72:	021b      	lsls	r3, r3, #8
 8001a74:	4972      	ldr	r1, [pc, #456]	; (8001c40 <HAL_RCC_OscConfig+0x298>)
 8001a76:	4313      	orrs	r3, r2
 8001a78:	604b      	str	r3, [r1, #4]
 8001a7a:	e025      	b.n	8001ac8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a7c:	4b70      	ldr	r3, [pc, #448]	; (8001c40 <HAL_RCC_OscConfig+0x298>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a6f      	ldr	r2, [pc, #444]	; (8001c40 <HAL_RCC_OscConfig+0x298>)
 8001a82:	f043 0308 	orr.w	r3, r3, #8
 8001a86:	6013      	str	r3, [r2, #0]
 8001a88:	4b6d      	ldr	r3, [pc, #436]	; (8001c40 <HAL_RCC_OscConfig+0x298>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a1b      	ldr	r3, [r3, #32]
 8001a94:	496a      	ldr	r1, [pc, #424]	; (8001c40 <HAL_RCC_OscConfig+0x298>)
 8001a96:	4313      	orrs	r3, r2
 8001a98:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a9a:	4b69      	ldr	r3, [pc, #420]	; (8001c40 <HAL_RCC_OscConfig+0x298>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	69db      	ldr	r3, [r3, #28]
 8001aa6:	021b      	lsls	r3, r3, #8
 8001aa8:	4965      	ldr	r1, [pc, #404]	; (8001c40 <HAL_RCC_OscConfig+0x298>)
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d109      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a1b      	ldr	r3, [r3, #32]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f000 fcc9 	bl	8002450 <RCC_SetFlashLatencyFromMSIRange>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e34d      	b.n	8002164 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ac8:	f000 fc36 	bl	8002338 <HAL_RCC_GetSysClockFreq>
 8001acc:	4602      	mov	r2, r0
 8001ace:	4b5c      	ldr	r3, [pc, #368]	; (8001c40 <HAL_RCC_OscConfig+0x298>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	091b      	lsrs	r3, r3, #4
 8001ad4:	f003 030f 	and.w	r3, r3, #15
 8001ad8:	495a      	ldr	r1, [pc, #360]	; (8001c44 <HAL_RCC_OscConfig+0x29c>)
 8001ada:	5ccb      	ldrb	r3, [r1, r3]
 8001adc:	f003 031f 	and.w	r3, r3, #31
 8001ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae4:	4a58      	ldr	r2, [pc, #352]	; (8001c48 <HAL_RCC_OscConfig+0x2a0>)
 8001ae6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001ae8:	4b58      	ldr	r3, [pc, #352]	; (8001c4c <HAL_RCC_OscConfig+0x2a4>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7fe fee5 	bl	80008bc <HAL_InitTick>
 8001af2:	4603      	mov	r3, r0
 8001af4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001af6:	7bfb      	ldrb	r3, [r7, #15]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d052      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001afc:	7bfb      	ldrb	r3, [r7, #15]
 8001afe:	e331      	b.n	8002164 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d032      	beq.n	8001b6e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b08:	4b4d      	ldr	r3, [pc, #308]	; (8001c40 <HAL_RCC_OscConfig+0x298>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a4c      	ldr	r2, [pc, #304]	; (8001c40 <HAL_RCC_OscConfig+0x298>)
 8001b0e:	f043 0301 	orr.w	r3, r3, #1
 8001b12:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b14:	f7fe ff22 	bl	800095c <HAL_GetTick>
 8001b18:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b1c:	f7fe ff1e 	bl	800095c <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e31a      	b.n	8002164 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b2e:	4b44      	ldr	r3, [pc, #272]	; (8001c40 <HAL_RCC_OscConfig+0x298>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d0f0      	beq.n	8001b1c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b3a:	4b41      	ldr	r3, [pc, #260]	; (8001c40 <HAL_RCC_OscConfig+0x298>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a40      	ldr	r2, [pc, #256]	; (8001c40 <HAL_RCC_OscConfig+0x298>)
 8001b40:	f043 0308 	orr.w	r3, r3, #8
 8001b44:	6013      	str	r3, [r2, #0]
 8001b46:	4b3e      	ldr	r3, [pc, #248]	; (8001c40 <HAL_RCC_OscConfig+0x298>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a1b      	ldr	r3, [r3, #32]
 8001b52:	493b      	ldr	r1, [pc, #236]	; (8001c40 <HAL_RCC_OscConfig+0x298>)
 8001b54:	4313      	orrs	r3, r2
 8001b56:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b58:	4b39      	ldr	r3, [pc, #228]	; (8001c40 <HAL_RCC_OscConfig+0x298>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	69db      	ldr	r3, [r3, #28]
 8001b64:	021b      	lsls	r3, r3, #8
 8001b66:	4936      	ldr	r1, [pc, #216]	; (8001c40 <HAL_RCC_OscConfig+0x298>)
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	604b      	str	r3, [r1, #4]
 8001b6c:	e01a      	b.n	8001ba4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b6e:	4b34      	ldr	r3, [pc, #208]	; (8001c40 <HAL_RCC_OscConfig+0x298>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a33      	ldr	r2, [pc, #204]	; (8001c40 <HAL_RCC_OscConfig+0x298>)
 8001b74:	f023 0301 	bic.w	r3, r3, #1
 8001b78:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b7a:	f7fe feef 	bl	800095c <HAL_GetTick>
 8001b7e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b80:	e008      	b.n	8001b94 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b82:	f7fe feeb 	bl	800095c <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d901      	bls.n	8001b94 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e2e7      	b.n	8002164 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b94:	4b2a      	ldr	r3, [pc, #168]	; (8001c40 <HAL_RCC_OscConfig+0x298>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0302 	and.w	r3, r3, #2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d1f0      	bne.n	8001b82 <HAL_RCC_OscConfig+0x1da>
 8001ba0:	e000      	b.n	8001ba4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ba2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d074      	beq.n	8001c9a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	2b08      	cmp	r3, #8
 8001bb4:	d005      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x21a>
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	2b0c      	cmp	r3, #12
 8001bba:	d10e      	bne.n	8001bda <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	2b03      	cmp	r3, #3
 8001bc0:	d10b      	bne.n	8001bda <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc2:	4b1f      	ldr	r3, [pc, #124]	; (8001c40 <HAL_RCC_OscConfig+0x298>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d064      	beq.n	8001c98 <HAL_RCC_OscConfig+0x2f0>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d160      	bne.n	8001c98 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e2c4      	b.n	8002164 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001be2:	d106      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x24a>
 8001be4:	4b16      	ldr	r3, [pc, #88]	; (8001c40 <HAL_RCC_OscConfig+0x298>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a15      	ldr	r2, [pc, #84]	; (8001c40 <HAL_RCC_OscConfig+0x298>)
 8001bea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bee:	6013      	str	r3, [r2, #0]
 8001bf0:	e01d      	b.n	8001c2e <HAL_RCC_OscConfig+0x286>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bfa:	d10c      	bne.n	8001c16 <HAL_RCC_OscConfig+0x26e>
 8001bfc:	4b10      	ldr	r3, [pc, #64]	; (8001c40 <HAL_RCC_OscConfig+0x298>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a0f      	ldr	r2, [pc, #60]	; (8001c40 <HAL_RCC_OscConfig+0x298>)
 8001c02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c06:	6013      	str	r3, [r2, #0]
 8001c08:	4b0d      	ldr	r3, [pc, #52]	; (8001c40 <HAL_RCC_OscConfig+0x298>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a0c      	ldr	r2, [pc, #48]	; (8001c40 <HAL_RCC_OscConfig+0x298>)
 8001c0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c12:	6013      	str	r3, [r2, #0]
 8001c14:	e00b      	b.n	8001c2e <HAL_RCC_OscConfig+0x286>
 8001c16:	4b0a      	ldr	r3, [pc, #40]	; (8001c40 <HAL_RCC_OscConfig+0x298>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a09      	ldr	r2, [pc, #36]	; (8001c40 <HAL_RCC_OscConfig+0x298>)
 8001c1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c20:	6013      	str	r3, [r2, #0]
 8001c22:	4b07      	ldr	r3, [pc, #28]	; (8001c40 <HAL_RCC_OscConfig+0x298>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a06      	ldr	r2, [pc, #24]	; (8001c40 <HAL_RCC_OscConfig+0x298>)
 8001c28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c2c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d01c      	beq.n	8001c70 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c36:	f7fe fe91 	bl	800095c <HAL_GetTick>
 8001c3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c3c:	e011      	b.n	8001c62 <HAL_RCC_OscConfig+0x2ba>
 8001c3e:	bf00      	nop
 8001c40:	40021000 	.word	0x40021000
 8001c44:	08002f18 	.word	0x08002f18
 8001c48:	20000000 	.word	0x20000000
 8001c4c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c50:	f7fe fe84 	bl	800095c <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b64      	cmp	r3, #100	; 0x64
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e280      	b.n	8002164 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c62:	4baf      	ldr	r3, [pc, #700]	; (8001f20 <HAL_RCC_OscConfig+0x578>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d0f0      	beq.n	8001c50 <HAL_RCC_OscConfig+0x2a8>
 8001c6e:	e014      	b.n	8001c9a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c70:	f7fe fe74 	bl	800095c <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c78:	f7fe fe70 	bl	800095c <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b64      	cmp	r3, #100	; 0x64
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e26c      	b.n	8002164 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c8a:	4ba5      	ldr	r3, [pc, #660]	; (8001f20 <HAL_RCC_OscConfig+0x578>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d1f0      	bne.n	8001c78 <HAL_RCC_OscConfig+0x2d0>
 8001c96:	e000      	b.n	8001c9a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d060      	beq.n	8001d68 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	2b04      	cmp	r3, #4
 8001caa:	d005      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x310>
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	2b0c      	cmp	r3, #12
 8001cb0:	d119      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d116      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cb8:	4b99      	ldr	r3, [pc, #612]	; (8001f20 <HAL_RCC_OscConfig+0x578>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d005      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x328>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d101      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e249      	b.n	8002164 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd0:	4b93      	ldr	r3, [pc, #588]	; (8001f20 <HAL_RCC_OscConfig+0x578>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	691b      	ldr	r3, [r3, #16]
 8001cdc:	061b      	lsls	r3, r3, #24
 8001cde:	4990      	ldr	r1, [pc, #576]	; (8001f20 <HAL_RCC_OscConfig+0x578>)
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ce4:	e040      	b.n	8001d68 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d023      	beq.n	8001d36 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cee:	4b8c      	ldr	r3, [pc, #560]	; (8001f20 <HAL_RCC_OscConfig+0x578>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a8b      	ldr	r2, [pc, #556]	; (8001f20 <HAL_RCC_OscConfig+0x578>)
 8001cf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cfa:	f7fe fe2f 	bl	800095c <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d00:	e008      	b.n	8001d14 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d02:	f7fe fe2b 	bl	800095c <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d901      	bls.n	8001d14 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e227      	b.n	8002164 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d14:	4b82      	ldr	r3, [pc, #520]	; (8001f20 <HAL_RCC_OscConfig+0x578>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d0f0      	beq.n	8001d02 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d20:	4b7f      	ldr	r3, [pc, #508]	; (8001f20 <HAL_RCC_OscConfig+0x578>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	691b      	ldr	r3, [r3, #16]
 8001d2c:	061b      	lsls	r3, r3, #24
 8001d2e:	497c      	ldr	r1, [pc, #496]	; (8001f20 <HAL_RCC_OscConfig+0x578>)
 8001d30:	4313      	orrs	r3, r2
 8001d32:	604b      	str	r3, [r1, #4]
 8001d34:	e018      	b.n	8001d68 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d36:	4b7a      	ldr	r3, [pc, #488]	; (8001f20 <HAL_RCC_OscConfig+0x578>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a79      	ldr	r2, [pc, #484]	; (8001f20 <HAL_RCC_OscConfig+0x578>)
 8001d3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d42:	f7fe fe0b 	bl	800095c <HAL_GetTick>
 8001d46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d48:	e008      	b.n	8001d5c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d4a:	f7fe fe07 	bl	800095c <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d901      	bls.n	8001d5c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e203      	b.n	8002164 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d5c:	4b70      	ldr	r3, [pc, #448]	; (8001f20 <HAL_RCC_OscConfig+0x578>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d1f0      	bne.n	8001d4a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0308 	and.w	r3, r3, #8
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d03c      	beq.n	8001dee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	695b      	ldr	r3, [r3, #20]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d01c      	beq.n	8001db6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d7c:	4b68      	ldr	r3, [pc, #416]	; (8001f20 <HAL_RCC_OscConfig+0x578>)
 8001d7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d82:	4a67      	ldr	r2, [pc, #412]	; (8001f20 <HAL_RCC_OscConfig+0x578>)
 8001d84:	f043 0301 	orr.w	r3, r3, #1
 8001d88:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d8c:	f7fe fde6 	bl	800095c <HAL_GetTick>
 8001d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d92:	e008      	b.n	8001da6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d94:	f7fe fde2 	bl	800095c <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e1de      	b.n	8002164 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001da6:	4b5e      	ldr	r3, [pc, #376]	; (8001f20 <HAL_RCC_OscConfig+0x578>)
 8001da8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dac:	f003 0302 	and.w	r3, r3, #2
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d0ef      	beq.n	8001d94 <HAL_RCC_OscConfig+0x3ec>
 8001db4:	e01b      	b.n	8001dee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001db6:	4b5a      	ldr	r3, [pc, #360]	; (8001f20 <HAL_RCC_OscConfig+0x578>)
 8001db8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dbc:	4a58      	ldr	r2, [pc, #352]	; (8001f20 <HAL_RCC_OscConfig+0x578>)
 8001dbe:	f023 0301 	bic.w	r3, r3, #1
 8001dc2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dc6:	f7fe fdc9 	bl	800095c <HAL_GetTick>
 8001dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001dcc:	e008      	b.n	8001de0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dce:	f7fe fdc5 	bl	800095c <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d901      	bls.n	8001de0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e1c1      	b.n	8002164 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001de0:	4b4f      	ldr	r3, [pc, #316]	; (8001f20 <HAL_RCC_OscConfig+0x578>)
 8001de2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d1ef      	bne.n	8001dce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0304 	and.w	r3, r3, #4
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	f000 80a6 	beq.w	8001f48 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001e00:	4b47      	ldr	r3, [pc, #284]	; (8001f20 <HAL_RCC_OscConfig+0x578>)
 8001e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d10d      	bne.n	8001e28 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e0c:	4b44      	ldr	r3, [pc, #272]	; (8001f20 <HAL_RCC_OscConfig+0x578>)
 8001e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e10:	4a43      	ldr	r2, [pc, #268]	; (8001f20 <HAL_RCC_OscConfig+0x578>)
 8001e12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e16:	6593      	str	r3, [r2, #88]	; 0x58
 8001e18:	4b41      	ldr	r3, [pc, #260]	; (8001f20 <HAL_RCC_OscConfig+0x578>)
 8001e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e20:	60bb      	str	r3, [r7, #8]
 8001e22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e24:	2301      	movs	r3, #1
 8001e26:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e28:	4b3e      	ldr	r3, [pc, #248]	; (8001f24 <HAL_RCC_OscConfig+0x57c>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d118      	bne.n	8001e66 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e34:	4b3b      	ldr	r3, [pc, #236]	; (8001f24 <HAL_RCC_OscConfig+0x57c>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a3a      	ldr	r2, [pc, #232]	; (8001f24 <HAL_RCC_OscConfig+0x57c>)
 8001e3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e3e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e40:	f7fe fd8c 	bl	800095c <HAL_GetTick>
 8001e44:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e46:	e008      	b.n	8001e5a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e48:	f7fe fd88 	bl	800095c <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e184      	b.n	8002164 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e5a:	4b32      	ldr	r3, [pc, #200]	; (8001f24 <HAL_RCC_OscConfig+0x57c>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d0f0      	beq.n	8001e48 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d108      	bne.n	8001e80 <HAL_RCC_OscConfig+0x4d8>
 8001e6e:	4b2c      	ldr	r3, [pc, #176]	; (8001f20 <HAL_RCC_OscConfig+0x578>)
 8001e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e74:	4a2a      	ldr	r2, [pc, #168]	; (8001f20 <HAL_RCC_OscConfig+0x578>)
 8001e76:	f043 0301 	orr.w	r3, r3, #1
 8001e7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e7e:	e024      	b.n	8001eca <HAL_RCC_OscConfig+0x522>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	2b05      	cmp	r3, #5
 8001e86:	d110      	bne.n	8001eaa <HAL_RCC_OscConfig+0x502>
 8001e88:	4b25      	ldr	r3, [pc, #148]	; (8001f20 <HAL_RCC_OscConfig+0x578>)
 8001e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e8e:	4a24      	ldr	r2, [pc, #144]	; (8001f20 <HAL_RCC_OscConfig+0x578>)
 8001e90:	f043 0304 	orr.w	r3, r3, #4
 8001e94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e98:	4b21      	ldr	r3, [pc, #132]	; (8001f20 <HAL_RCC_OscConfig+0x578>)
 8001e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e9e:	4a20      	ldr	r2, [pc, #128]	; (8001f20 <HAL_RCC_OscConfig+0x578>)
 8001ea0:	f043 0301 	orr.w	r3, r3, #1
 8001ea4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ea8:	e00f      	b.n	8001eca <HAL_RCC_OscConfig+0x522>
 8001eaa:	4b1d      	ldr	r3, [pc, #116]	; (8001f20 <HAL_RCC_OscConfig+0x578>)
 8001eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eb0:	4a1b      	ldr	r2, [pc, #108]	; (8001f20 <HAL_RCC_OscConfig+0x578>)
 8001eb2:	f023 0301 	bic.w	r3, r3, #1
 8001eb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001eba:	4b19      	ldr	r3, [pc, #100]	; (8001f20 <HAL_RCC_OscConfig+0x578>)
 8001ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ec0:	4a17      	ldr	r2, [pc, #92]	; (8001f20 <HAL_RCC_OscConfig+0x578>)
 8001ec2:	f023 0304 	bic.w	r3, r3, #4
 8001ec6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d016      	beq.n	8001f00 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed2:	f7fe fd43 	bl	800095c <HAL_GetTick>
 8001ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ed8:	e00a      	b.n	8001ef0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eda:	f7fe fd3f 	bl	800095c <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d901      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e139      	b.n	8002164 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ef0:	4b0b      	ldr	r3, [pc, #44]	; (8001f20 <HAL_RCC_OscConfig+0x578>)
 8001ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d0ed      	beq.n	8001eda <HAL_RCC_OscConfig+0x532>
 8001efe:	e01a      	b.n	8001f36 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f00:	f7fe fd2c 	bl	800095c <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f06:	e00f      	b.n	8001f28 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f08:	f7fe fd28 	bl	800095c <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d906      	bls.n	8001f28 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e122      	b.n	8002164 <HAL_RCC_OscConfig+0x7bc>
 8001f1e:	bf00      	nop
 8001f20:	40021000 	.word	0x40021000
 8001f24:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f28:	4b90      	ldr	r3, [pc, #576]	; (800216c <HAL_RCC_OscConfig+0x7c4>)
 8001f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1e8      	bne.n	8001f08 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f36:	7ffb      	ldrb	r3, [r7, #31]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d105      	bne.n	8001f48 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f3c:	4b8b      	ldr	r3, [pc, #556]	; (800216c <HAL_RCC_OscConfig+0x7c4>)
 8001f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f40:	4a8a      	ldr	r2, [pc, #552]	; (800216c <HAL_RCC_OscConfig+0x7c4>)
 8001f42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f46:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	f000 8108 	beq.w	8002162 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	f040 80d0 	bne.w	80020fc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001f5c:	4b83      	ldr	r3, [pc, #524]	; (800216c <HAL_RCC_OscConfig+0x7c4>)
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	f003 0203 	and.w	r2, r3, #3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d130      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d127      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f8c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d11f      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f9c:	2a07      	cmp	r2, #7
 8001f9e:	bf14      	ite	ne
 8001fa0:	2201      	movne	r2, #1
 8001fa2:	2200      	moveq	r2, #0
 8001fa4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d113      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fb4:	085b      	lsrs	r3, r3, #1
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d109      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc8:	085b      	lsrs	r3, r3, #1
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d06e      	beq.n	80020b0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	2b0c      	cmp	r3, #12
 8001fd6:	d069      	beq.n	80020ac <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001fd8:	4b64      	ldr	r3, [pc, #400]	; (800216c <HAL_RCC_OscConfig+0x7c4>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d105      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001fe4:	4b61      	ldr	r3, [pc, #388]	; (800216c <HAL_RCC_OscConfig+0x7c4>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e0b7      	b.n	8002164 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001ff4:	4b5d      	ldr	r3, [pc, #372]	; (800216c <HAL_RCC_OscConfig+0x7c4>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a5c      	ldr	r2, [pc, #368]	; (800216c <HAL_RCC_OscConfig+0x7c4>)
 8001ffa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ffe:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002000:	f7fe fcac 	bl	800095c <HAL_GetTick>
 8002004:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002008:	f7fe fca8 	bl	800095c <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e0a4      	b.n	8002164 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800201a:	4b54      	ldr	r3, [pc, #336]	; (800216c <HAL_RCC_OscConfig+0x7c4>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1f0      	bne.n	8002008 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002026:	4b51      	ldr	r3, [pc, #324]	; (800216c <HAL_RCC_OscConfig+0x7c4>)
 8002028:	68da      	ldr	r2, [r3, #12]
 800202a:	4b51      	ldr	r3, [pc, #324]	; (8002170 <HAL_RCC_OscConfig+0x7c8>)
 800202c:	4013      	ands	r3, r2
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002036:	3a01      	subs	r2, #1
 8002038:	0112      	lsls	r2, r2, #4
 800203a:	4311      	orrs	r1, r2
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002040:	0212      	lsls	r2, r2, #8
 8002042:	4311      	orrs	r1, r2
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002048:	0852      	lsrs	r2, r2, #1
 800204a:	3a01      	subs	r2, #1
 800204c:	0552      	lsls	r2, r2, #21
 800204e:	4311      	orrs	r1, r2
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002054:	0852      	lsrs	r2, r2, #1
 8002056:	3a01      	subs	r2, #1
 8002058:	0652      	lsls	r2, r2, #25
 800205a:	4311      	orrs	r1, r2
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002060:	0912      	lsrs	r2, r2, #4
 8002062:	0452      	lsls	r2, r2, #17
 8002064:	430a      	orrs	r2, r1
 8002066:	4941      	ldr	r1, [pc, #260]	; (800216c <HAL_RCC_OscConfig+0x7c4>)
 8002068:	4313      	orrs	r3, r2
 800206a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800206c:	4b3f      	ldr	r3, [pc, #252]	; (800216c <HAL_RCC_OscConfig+0x7c4>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a3e      	ldr	r2, [pc, #248]	; (800216c <HAL_RCC_OscConfig+0x7c4>)
 8002072:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002076:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002078:	4b3c      	ldr	r3, [pc, #240]	; (800216c <HAL_RCC_OscConfig+0x7c4>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	4a3b      	ldr	r2, [pc, #236]	; (800216c <HAL_RCC_OscConfig+0x7c4>)
 800207e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002082:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002084:	f7fe fc6a 	bl	800095c <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800208c:	f7fe fc66 	bl	800095c <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e062      	b.n	8002164 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800209e:	4b33      	ldr	r3, [pc, #204]	; (800216c <HAL_RCC_OscConfig+0x7c4>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d0f0      	beq.n	800208c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020aa:	e05a      	b.n	8002162 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e059      	b.n	8002164 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020b0:	4b2e      	ldr	r3, [pc, #184]	; (800216c <HAL_RCC_OscConfig+0x7c4>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d152      	bne.n	8002162 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80020bc:	4b2b      	ldr	r3, [pc, #172]	; (800216c <HAL_RCC_OscConfig+0x7c4>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a2a      	ldr	r2, [pc, #168]	; (800216c <HAL_RCC_OscConfig+0x7c4>)
 80020c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020c6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020c8:	4b28      	ldr	r3, [pc, #160]	; (800216c <HAL_RCC_OscConfig+0x7c4>)
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	4a27      	ldr	r2, [pc, #156]	; (800216c <HAL_RCC_OscConfig+0x7c4>)
 80020ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80020d4:	f7fe fc42 	bl	800095c <HAL_GetTick>
 80020d8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020dc:	f7fe fc3e 	bl	800095c <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e03a      	b.n	8002164 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020ee:	4b1f      	ldr	r3, [pc, #124]	; (800216c <HAL_RCC_OscConfig+0x7c4>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d0f0      	beq.n	80020dc <HAL_RCC_OscConfig+0x734>
 80020fa:	e032      	b.n	8002162 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	2b0c      	cmp	r3, #12
 8002100:	d02d      	beq.n	800215e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002102:	4b1a      	ldr	r3, [pc, #104]	; (800216c <HAL_RCC_OscConfig+0x7c4>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a19      	ldr	r2, [pc, #100]	; (800216c <HAL_RCC_OscConfig+0x7c4>)
 8002108:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800210c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800210e:	4b17      	ldr	r3, [pc, #92]	; (800216c <HAL_RCC_OscConfig+0x7c4>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d105      	bne.n	8002126 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800211a:	4b14      	ldr	r3, [pc, #80]	; (800216c <HAL_RCC_OscConfig+0x7c4>)
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	4a13      	ldr	r2, [pc, #76]	; (800216c <HAL_RCC_OscConfig+0x7c4>)
 8002120:	f023 0303 	bic.w	r3, r3, #3
 8002124:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002126:	4b11      	ldr	r3, [pc, #68]	; (800216c <HAL_RCC_OscConfig+0x7c4>)
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	4a10      	ldr	r2, [pc, #64]	; (800216c <HAL_RCC_OscConfig+0x7c4>)
 800212c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002130:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002134:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002136:	f7fe fc11 	bl	800095c <HAL_GetTick>
 800213a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800213c:	e008      	b.n	8002150 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800213e:	f7fe fc0d 	bl	800095c <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	2b02      	cmp	r3, #2
 800214a:	d901      	bls.n	8002150 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e009      	b.n	8002164 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002150:	4b06      	ldr	r3, [pc, #24]	; (800216c <HAL_RCC_OscConfig+0x7c4>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d1f0      	bne.n	800213e <HAL_RCC_OscConfig+0x796>
 800215c:	e001      	b.n	8002162 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e000      	b.n	8002164 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	3720      	adds	r7, #32
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40021000 	.word	0x40021000
 8002170:	f99d808c 	.word	0xf99d808c

08002174 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d101      	bne.n	8002188 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e0c8      	b.n	800231a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002188:	4b66      	ldr	r3, [pc, #408]	; (8002324 <HAL_RCC_ClockConfig+0x1b0>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0307 	and.w	r3, r3, #7
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	429a      	cmp	r2, r3
 8002194:	d910      	bls.n	80021b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002196:	4b63      	ldr	r3, [pc, #396]	; (8002324 <HAL_RCC_ClockConfig+0x1b0>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f023 0207 	bic.w	r2, r3, #7
 800219e:	4961      	ldr	r1, [pc, #388]	; (8002324 <HAL_RCC_ClockConfig+0x1b0>)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021a6:	4b5f      	ldr	r3, [pc, #380]	; (8002324 <HAL_RCC_ClockConfig+0x1b0>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d001      	beq.n	80021b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e0b0      	b.n	800231a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0301 	and.w	r3, r3, #1
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d04c      	beq.n	800225e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	2b03      	cmp	r3, #3
 80021ca:	d107      	bne.n	80021dc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021cc:	4b56      	ldr	r3, [pc, #344]	; (8002328 <HAL_RCC_ClockConfig+0x1b4>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d121      	bne.n	800221c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e09e      	b.n	800231a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d107      	bne.n	80021f4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021e4:	4b50      	ldr	r3, [pc, #320]	; (8002328 <HAL_RCC_ClockConfig+0x1b4>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d115      	bne.n	800221c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e092      	b.n	800231a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d107      	bne.n	800220c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021fc:	4b4a      	ldr	r3, [pc, #296]	; (8002328 <HAL_RCC_ClockConfig+0x1b4>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d109      	bne.n	800221c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e086      	b.n	800231a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800220c:	4b46      	ldr	r3, [pc, #280]	; (8002328 <HAL_RCC_ClockConfig+0x1b4>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002214:	2b00      	cmp	r3, #0
 8002216:	d101      	bne.n	800221c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e07e      	b.n	800231a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800221c:	4b42      	ldr	r3, [pc, #264]	; (8002328 <HAL_RCC_ClockConfig+0x1b4>)
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f023 0203 	bic.w	r2, r3, #3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	493f      	ldr	r1, [pc, #252]	; (8002328 <HAL_RCC_ClockConfig+0x1b4>)
 800222a:	4313      	orrs	r3, r2
 800222c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800222e:	f7fe fb95 	bl	800095c <HAL_GetTick>
 8002232:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002234:	e00a      	b.n	800224c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002236:	f7fe fb91 	bl	800095c <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	f241 3288 	movw	r2, #5000	; 0x1388
 8002244:	4293      	cmp	r3, r2
 8002246:	d901      	bls.n	800224c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e066      	b.n	800231a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800224c:	4b36      	ldr	r3, [pc, #216]	; (8002328 <HAL_RCC_ClockConfig+0x1b4>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f003 020c 	and.w	r2, r3, #12
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	429a      	cmp	r2, r3
 800225c:	d1eb      	bne.n	8002236 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d008      	beq.n	800227c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800226a:	4b2f      	ldr	r3, [pc, #188]	; (8002328 <HAL_RCC_ClockConfig+0x1b4>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	492c      	ldr	r1, [pc, #176]	; (8002328 <HAL_RCC_ClockConfig+0x1b4>)
 8002278:	4313      	orrs	r3, r2
 800227a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800227c:	4b29      	ldr	r3, [pc, #164]	; (8002324 <HAL_RCC_ClockConfig+0x1b0>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0307 	and.w	r3, r3, #7
 8002284:	683a      	ldr	r2, [r7, #0]
 8002286:	429a      	cmp	r2, r3
 8002288:	d210      	bcs.n	80022ac <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800228a:	4b26      	ldr	r3, [pc, #152]	; (8002324 <HAL_RCC_ClockConfig+0x1b0>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f023 0207 	bic.w	r2, r3, #7
 8002292:	4924      	ldr	r1, [pc, #144]	; (8002324 <HAL_RCC_ClockConfig+0x1b0>)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	4313      	orrs	r3, r2
 8002298:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800229a:	4b22      	ldr	r3, [pc, #136]	; (8002324 <HAL_RCC_ClockConfig+0x1b0>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0307 	and.w	r3, r3, #7
 80022a2:	683a      	ldr	r2, [r7, #0]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d001      	beq.n	80022ac <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e036      	b.n	800231a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0304 	and.w	r3, r3, #4
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d008      	beq.n	80022ca <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022b8:	4b1b      	ldr	r3, [pc, #108]	; (8002328 <HAL_RCC_ClockConfig+0x1b4>)
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	4918      	ldr	r1, [pc, #96]	; (8002328 <HAL_RCC_ClockConfig+0x1b4>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0308 	and.w	r3, r3, #8
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d009      	beq.n	80022ea <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022d6:	4b14      	ldr	r3, [pc, #80]	; (8002328 <HAL_RCC_ClockConfig+0x1b4>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	4910      	ldr	r1, [pc, #64]	; (8002328 <HAL_RCC_ClockConfig+0x1b4>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022ea:	f000 f825 	bl	8002338 <HAL_RCC_GetSysClockFreq>
 80022ee:	4602      	mov	r2, r0
 80022f0:	4b0d      	ldr	r3, [pc, #52]	; (8002328 <HAL_RCC_ClockConfig+0x1b4>)
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	091b      	lsrs	r3, r3, #4
 80022f6:	f003 030f 	and.w	r3, r3, #15
 80022fa:	490c      	ldr	r1, [pc, #48]	; (800232c <HAL_RCC_ClockConfig+0x1b8>)
 80022fc:	5ccb      	ldrb	r3, [r1, r3]
 80022fe:	f003 031f 	and.w	r3, r3, #31
 8002302:	fa22 f303 	lsr.w	r3, r2, r3
 8002306:	4a0a      	ldr	r2, [pc, #40]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 8002308:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800230a:	4b0a      	ldr	r3, [pc, #40]	; (8002334 <HAL_RCC_ClockConfig+0x1c0>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4618      	mov	r0, r3
 8002310:	f7fe fad4 	bl	80008bc <HAL_InitTick>
 8002314:	4603      	mov	r3, r0
 8002316:	72fb      	strb	r3, [r7, #11]

  return status;
 8002318:	7afb      	ldrb	r3, [r7, #11]
}
 800231a:	4618      	mov	r0, r3
 800231c:	3710      	adds	r7, #16
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40022000 	.word	0x40022000
 8002328:	40021000 	.word	0x40021000
 800232c:	08002f18 	.word	0x08002f18
 8002330:	20000000 	.word	0x20000000
 8002334:	20000004 	.word	0x20000004

08002338 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002338:	b480      	push	{r7}
 800233a:	b089      	sub	sp, #36	; 0x24
 800233c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800233e:	2300      	movs	r3, #0
 8002340:	61fb      	str	r3, [r7, #28]
 8002342:	2300      	movs	r3, #0
 8002344:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002346:	4b3e      	ldr	r3, [pc, #248]	; (8002440 <HAL_RCC_GetSysClockFreq+0x108>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f003 030c 	and.w	r3, r3, #12
 800234e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002350:	4b3b      	ldr	r3, [pc, #236]	; (8002440 <HAL_RCC_GetSysClockFreq+0x108>)
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	f003 0303 	and.w	r3, r3, #3
 8002358:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d005      	beq.n	800236c <HAL_RCC_GetSysClockFreq+0x34>
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	2b0c      	cmp	r3, #12
 8002364:	d121      	bne.n	80023aa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d11e      	bne.n	80023aa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800236c:	4b34      	ldr	r3, [pc, #208]	; (8002440 <HAL_RCC_GetSysClockFreq+0x108>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0308 	and.w	r3, r3, #8
 8002374:	2b00      	cmp	r3, #0
 8002376:	d107      	bne.n	8002388 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002378:	4b31      	ldr	r3, [pc, #196]	; (8002440 <HAL_RCC_GetSysClockFreq+0x108>)
 800237a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800237e:	0a1b      	lsrs	r3, r3, #8
 8002380:	f003 030f 	and.w	r3, r3, #15
 8002384:	61fb      	str	r3, [r7, #28]
 8002386:	e005      	b.n	8002394 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002388:	4b2d      	ldr	r3, [pc, #180]	; (8002440 <HAL_RCC_GetSysClockFreq+0x108>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	091b      	lsrs	r3, r3, #4
 800238e:	f003 030f 	and.w	r3, r3, #15
 8002392:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002394:	4a2b      	ldr	r2, [pc, #172]	; (8002444 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800239c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d10d      	bne.n	80023c0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023a8:	e00a      	b.n	80023c0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	2b04      	cmp	r3, #4
 80023ae:	d102      	bne.n	80023b6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023b0:	4b25      	ldr	r3, [pc, #148]	; (8002448 <HAL_RCC_GetSysClockFreq+0x110>)
 80023b2:	61bb      	str	r3, [r7, #24]
 80023b4:	e004      	b.n	80023c0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	2b08      	cmp	r3, #8
 80023ba:	d101      	bne.n	80023c0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023bc:	4b23      	ldr	r3, [pc, #140]	; (800244c <HAL_RCC_GetSysClockFreq+0x114>)
 80023be:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	2b0c      	cmp	r3, #12
 80023c4:	d134      	bne.n	8002430 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023c6:	4b1e      	ldr	r3, [pc, #120]	; (8002440 <HAL_RCC_GetSysClockFreq+0x108>)
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	f003 0303 	and.w	r3, r3, #3
 80023ce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d003      	beq.n	80023de <HAL_RCC_GetSysClockFreq+0xa6>
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	2b03      	cmp	r3, #3
 80023da:	d003      	beq.n	80023e4 <HAL_RCC_GetSysClockFreq+0xac>
 80023dc:	e005      	b.n	80023ea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80023de:	4b1a      	ldr	r3, [pc, #104]	; (8002448 <HAL_RCC_GetSysClockFreq+0x110>)
 80023e0:	617b      	str	r3, [r7, #20]
      break;
 80023e2:	e005      	b.n	80023f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80023e4:	4b19      	ldr	r3, [pc, #100]	; (800244c <HAL_RCC_GetSysClockFreq+0x114>)
 80023e6:	617b      	str	r3, [r7, #20]
      break;
 80023e8:	e002      	b.n	80023f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	617b      	str	r3, [r7, #20]
      break;
 80023ee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023f0:	4b13      	ldr	r3, [pc, #76]	; (8002440 <HAL_RCC_GetSysClockFreq+0x108>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	091b      	lsrs	r3, r3, #4
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	3301      	adds	r3, #1
 80023fc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80023fe:	4b10      	ldr	r3, [pc, #64]	; (8002440 <HAL_RCC_GetSysClockFreq+0x108>)
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	0a1b      	lsrs	r3, r3, #8
 8002404:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002408:	697a      	ldr	r2, [r7, #20]
 800240a:	fb02 f203 	mul.w	r2, r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	fbb2 f3f3 	udiv	r3, r2, r3
 8002414:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002416:	4b0a      	ldr	r3, [pc, #40]	; (8002440 <HAL_RCC_GetSysClockFreq+0x108>)
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	0e5b      	lsrs	r3, r3, #25
 800241c:	f003 0303 	and.w	r3, r3, #3
 8002420:	3301      	adds	r3, #1
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002426:	697a      	ldr	r2, [r7, #20]
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	fbb2 f3f3 	udiv	r3, r2, r3
 800242e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002430:	69bb      	ldr	r3, [r7, #24]
}
 8002432:	4618      	mov	r0, r3
 8002434:	3724      	adds	r7, #36	; 0x24
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	40021000 	.word	0x40021000
 8002444:	08002f28 	.word	0x08002f28
 8002448:	00f42400 	.word	0x00f42400
 800244c:	007a1200 	.word	0x007a1200

08002450 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002458:	2300      	movs	r3, #0
 800245a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800245c:	4b2a      	ldr	r3, [pc, #168]	; (8002508 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800245e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002460:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d003      	beq.n	8002470 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002468:	f7ff fa3a 	bl	80018e0 <HAL_PWREx_GetVoltageRange>
 800246c:	6178      	str	r0, [r7, #20]
 800246e:	e014      	b.n	800249a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002470:	4b25      	ldr	r3, [pc, #148]	; (8002508 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002474:	4a24      	ldr	r2, [pc, #144]	; (8002508 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002476:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800247a:	6593      	str	r3, [r2, #88]	; 0x58
 800247c:	4b22      	ldr	r3, [pc, #136]	; (8002508 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800247e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002480:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002484:	60fb      	str	r3, [r7, #12]
 8002486:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002488:	f7ff fa2a 	bl	80018e0 <HAL_PWREx_GetVoltageRange>
 800248c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800248e:	4b1e      	ldr	r3, [pc, #120]	; (8002508 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002492:	4a1d      	ldr	r2, [pc, #116]	; (8002508 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002494:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002498:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024a0:	d10b      	bne.n	80024ba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2b80      	cmp	r3, #128	; 0x80
 80024a6:	d919      	bls.n	80024dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2ba0      	cmp	r3, #160	; 0xa0
 80024ac:	d902      	bls.n	80024b4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80024ae:	2302      	movs	r3, #2
 80024b0:	613b      	str	r3, [r7, #16]
 80024b2:	e013      	b.n	80024dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80024b4:	2301      	movs	r3, #1
 80024b6:	613b      	str	r3, [r7, #16]
 80024b8:	e010      	b.n	80024dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2b80      	cmp	r3, #128	; 0x80
 80024be:	d902      	bls.n	80024c6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80024c0:	2303      	movs	r3, #3
 80024c2:	613b      	str	r3, [r7, #16]
 80024c4:	e00a      	b.n	80024dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2b80      	cmp	r3, #128	; 0x80
 80024ca:	d102      	bne.n	80024d2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80024cc:	2302      	movs	r3, #2
 80024ce:	613b      	str	r3, [r7, #16]
 80024d0:	e004      	b.n	80024dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2b70      	cmp	r3, #112	; 0x70
 80024d6:	d101      	bne.n	80024dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80024d8:	2301      	movs	r3, #1
 80024da:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80024dc:	4b0b      	ldr	r3, [pc, #44]	; (800250c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f023 0207 	bic.w	r2, r3, #7
 80024e4:	4909      	ldr	r1, [pc, #36]	; (800250c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80024ec:	4b07      	ldr	r3, [pc, #28]	; (800250c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0307 	and.w	r3, r3, #7
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d001      	beq.n	80024fe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e000      	b.n	8002500 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80024fe:	2300      	movs	r3, #0
}
 8002500:	4618      	mov	r0, r3
 8002502:	3718      	adds	r7, #24
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	40021000 	.word	0x40021000
 800250c:	40022000 	.word	0x40022000

08002510 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002518:	2300      	movs	r3, #0
 800251a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800251c:	2300      	movs	r3, #0
 800251e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002528:	2b00      	cmp	r3, #0
 800252a:	d041      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002530:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002534:	d02a      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002536:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800253a:	d824      	bhi.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800253c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002540:	d008      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002542:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002546:	d81e      	bhi.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002548:	2b00      	cmp	r3, #0
 800254a:	d00a      	beq.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800254c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002550:	d010      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002552:	e018      	b.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002554:	4b86      	ldr	r3, [pc, #536]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	4a85      	ldr	r2, [pc, #532]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800255a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800255e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002560:	e015      	b.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	3304      	adds	r3, #4
 8002566:	2100      	movs	r1, #0
 8002568:	4618      	mov	r0, r3
 800256a:	f000 facb 	bl	8002b04 <RCCEx_PLLSAI1_Config>
 800256e:	4603      	mov	r3, r0
 8002570:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002572:	e00c      	b.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	3320      	adds	r3, #32
 8002578:	2100      	movs	r1, #0
 800257a:	4618      	mov	r0, r3
 800257c:	f000 fbb6 	bl	8002cec <RCCEx_PLLSAI2_Config>
 8002580:	4603      	mov	r3, r0
 8002582:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002584:	e003      	b.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	74fb      	strb	r3, [r7, #19]
      break;
 800258a:	e000      	b.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800258c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800258e:	7cfb      	ldrb	r3, [r7, #19]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d10b      	bne.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002594:	4b76      	ldr	r3, [pc, #472]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025a2:	4973      	ldr	r1, [pc, #460]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80025aa:	e001      	b.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025ac:	7cfb      	ldrb	r3, [r7, #19]
 80025ae:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d041      	beq.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025c0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80025c4:	d02a      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80025c6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80025ca:	d824      	bhi.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80025cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80025d0:	d008      	beq.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80025d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80025d6:	d81e      	bhi.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d00a      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80025dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025e0:	d010      	beq.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80025e2:	e018      	b.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80025e4:	4b62      	ldr	r3, [pc, #392]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	4a61      	ldr	r2, [pc, #388]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ee:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025f0:	e015      	b.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	3304      	adds	r3, #4
 80025f6:	2100      	movs	r1, #0
 80025f8:	4618      	mov	r0, r3
 80025fa:	f000 fa83 	bl	8002b04 <RCCEx_PLLSAI1_Config>
 80025fe:	4603      	mov	r3, r0
 8002600:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002602:	e00c      	b.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	3320      	adds	r3, #32
 8002608:	2100      	movs	r1, #0
 800260a:	4618      	mov	r0, r3
 800260c:	f000 fb6e 	bl	8002cec <RCCEx_PLLSAI2_Config>
 8002610:	4603      	mov	r3, r0
 8002612:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002614:	e003      	b.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	74fb      	strb	r3, [r7, #19]
      break;
 800261a:	e000      	b.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800261c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800261e:	7cfb      	ldrb	r3, [r7, #19]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d10b      	bne.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002624:	4b52      	ldr	r3, [pc, #328]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800262a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002632:	494f      	ldr	r1, [pc, #316]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002634:	4313      	orrs	r3, r2
 8002636:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800263a:	e001      	b.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800263c:	7cfb      	ldrb	r3, [r7, #19]
 800263e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002648:	2b00      	cmp	r3, #0
 800264a:	f000 80a0 	beq.w	800278e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800264e:	2300      	movs	r3, #0
 8002650:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002652:	4b47      	ldr	r3, [pc, #284]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800265e:	2301      	movs	r3, #1
 8002660:	e000      	b.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002662:	2300      	movs	r3, #0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d00d      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002668:	4b41      	ldr	r3, [pc, #260]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800266a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800266c:	4a40      	ldr	r2, [pc, #256]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800266e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002672:	6593      	str	r3, [r2, #88]	; 0x58
 8002674:	4b3e      	ldr	r3, [pc, #248]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800267c:	60bb      	str	r3, [r7, #8]
 800267e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002680:	2301      	movs	r3, #1
 8002682:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002684:	4b3b      	ldr	r3, [pc, #236]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a3a      	ldr	r2, [pc, #232]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800268a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800268e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002690:	f7fe f964 	bl	800095c <HAL_GetTick>
 8002694:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002696:	e009      	b.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002698:	f7fe f960 	bl	800095c <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d902      	bls.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	74fb      	strb	r3, [r7, #19]
        break;
 80026aa:	e005      	b.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80026ac:	4b31      	ldr	r3, [pc, #196]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d0ef      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80026b8:	7cfb      	ldrb	r3, [r7, #19]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d15c      	bne.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80026be:	4b2c      	ldr	r3, [pc, #176]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026c8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d01f      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026d6:	697a      	ldr	r2, [r7, #20]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d019      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80026dc:	4b24      	ldr	r3, [pc, #144]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026e6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80026e8:	4b21      	ldr	r3, [pc, #132]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ee:	4a20      	ldr	r2, [pc, #128]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026f8:	4b1d      	ldr	r3, [pc, #116]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026fe:	4a1c      	ldr	r2, [pc, #112]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002700:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002704:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002708:	4a19      	ldr	r2, [pc, #100]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	2b00      	cmp	r3, #0
 8002718:	d016      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800271a:	f7fe f91f 	bl	800095c <HAL_GetTick>
 800271e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002720:	e00b      	b.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002722:	f7fe f91b 	bl	800095c <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002730:	4293      	cmp	r3, r2
 8002732:	d902      	bls.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	74fb      	strb	r3, [r7, #19]
            break;
 8002738:	e006      	b.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800273a:	4b0d      	ldr	r3, [pc, #52]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800273c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002740:	f003 0302 	and.w	r3, r3, #2
 8002744:	2b00      	cmp	r3, #0
 8002746:	d0ec      	beq.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002748:	7cfb      	ldrb	r3, [r7, #19]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10c      	bne.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800274e:	4b08      	ldr	r3, [pc, #32]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002754:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800275e:	4904      	ldr	r1, [pc, #16]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002760:	4313      	orrs	r3, r2
 8002762:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002766:	e009      	b.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002768:	7cfb      	ldrb	r3, [r7, #19]
 800276a:	74bb      	strb	r3, [r7, #18]
 800276c:	e006      	b.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800276e:	bf00      	nop
 8002770:	40021000 	.word	0x40021000
 8002774:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002778:	7cfb      	ldrb	r3, [r7, #19]
 800277a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800277c:	7c7b      	ldrb	r3, [r7, #17]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d105      	bne.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002782:	4b9e      	ldr	r3, [pc, #632]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002786:	4a9d      	ldr	r2, [pc, #628]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002788:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800278c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00a      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800279a:	4b98      	ldr	r3, [pc, #608]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800279c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a0:	f023 0203 	bic.w	r2, r3, #3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a8:	4994      	ldr	r1, [pc, #592]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0302 	and.w	r3, r3, #2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d00a      	beq.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027bc:	4b8f      	ldr	r3, [pc, #572]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c2:	f023 020c 	bic.w	r2, r3, #12
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ca:	498c      	ldr	r1, [pc, #560]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0304 	and.w	r3, r3, #4
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d00a      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027de:	4b87      	ldr	r3, [pc, #540]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ec:	4983      	ldr	r1, [pc, #524]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0308 	and.w	r3, r3, #8
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d00a      	beq.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002800:	4b7e      	ldr	r3, [pc, #504]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002806:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280e:	497b      	ldr	r1, [pc, #492]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002810:	4313      	orrs	r3, r2
 8002812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0310 	and.w	r3, r3, #16
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00a      	beq.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002822:	4b76      	ldr	r3, [pc, #472]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002828:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002830:	4972      	ldr	r1, [pc, #456]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002832:	4313      	orrs	r3, r2
 8002834:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0320 	and.w	r3, r3, #32
 8002840:	2b00      	cmp	r3, #0
 8002842:	d00a      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002844:	4b6d      	ldr	r3, [pc, #436]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800284a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002852:	496a      	ldr	r1, [pc, #424]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002854:	4313      	orrs	r3, r2
 8002856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00a      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002866:	4b65      	ldr	r3, [pc, #404]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800286c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002874:	4961      	ldr	r1, [pc, #388]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002876:	4313      	orrs	r3, r2
 8002878:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00a      	beq.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002888:	4b5c      	ldr	r3, [pc, #368]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800288a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800288e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002896:	4959      	ldr	r1, [pc, #356]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002898:	4313      	orrs	r3, r2
 800289a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00a      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028aa:	4b54      	ldr	r3, [pc, #336]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028b0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028b8:	4950      	ldr	r1, [pc, #320]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00a      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80028cc:	4b4b      	ldr	r3, [pc, #300]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028da:	4948      	ldr	r1, [pc, #288]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d00a      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028ee:	4b43      	ldr	r3, [pc, #268]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028fc:	493f      	ldr	r1, [pc, #252]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d028      	beq.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002910:	4b3a      	ldr	r3, [pc, #232]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002916:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800291e:	4937      	ldr	r1, [pc, #220]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002920:	4313      	orrs	r3, r2
 8002922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800292a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800292e:	d106      	bne.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002930:	4b32      	ldr	r3, [pc, #200]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	4a31      	ldr	r2, [pc, #196]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002936:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800293a:	60d3      	str	r3, [r2, #12]
 800293c:	e011      	b.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002942:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002946:	d10c      	bne.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	3304      	adds	r3, #4
 800294c:	2101      	movs	r1, #1
 800294e:	4618      	mov	r0, r3
 8002950:	f000 f8d8 	bl	8002b04 <RCCEx_PLLSAI1_Config>
 8002954:	4603      	mov	r3, r0
 8002956:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002958:	7cfb      	ldrb	r3, [r7, #19]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800295e:	7cfb      	ldrb	r3, [r7, #19]
 8002960:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d028      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800296e:	4b23      	ldr	r3, [pc, #140]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002974:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800297c:	491f      	ldr	r1, [pc, #124]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800297e:	4313      	orrs	r3, r2
 8002980:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002988:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800298c:	d106      	bne.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800298e:	4b1b      	ldr	r3, [pc, #108]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	4a1a      	ldr	r2, [pc, #104]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002994:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002998:	60d3      	str	r3, [r2, #12]
 800299a:	e011      	b.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029a4:	d10c      	bne.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	3304      	adds	r3, #4
 80029aa:	2101      	movs	r1, #1
 80029ac:	4618      	mov	r0, r3
 80029ae:	f000 f8a9 	bl	8002b04 <RCCEx_PLLSAI1_Config>
 80029b2:	4603      	mov	r3, r0
 80029b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029b6:	7cfb      	ldrb	r3, [r7, #19]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80029bc:	7cfb      	ldrb	r3, [r7, #19]
 80029be:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d02b      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80029cc:	4b0b      	ldr	r3, [pc, #44]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029da:	4908      	ldr	r1, [pc, #32]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029ea:	d109      	bne.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029ec:	4b03      	ldr	r3, [pc, #12]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	4a02      	ldr	r2, [pc, #8]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029f6:	60d3      	str	r3, [r2, #12]
 80029f8:	e014      	b.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80029fa:	bf00      	nop
 80029fc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a04:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a08:	d10c      	bne.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	3304      	adds	r3, #4
 8002a0e:	2101      	movs	r1, #1
 8002a10:	4618      	mov	r0, r3
 8002a12:	f000 f877 	bl	8002b04 <RCCEx_PLLSAI1_Config>
 8002a16:	4603      	mov	r3, r0
 8002a18:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a1a:	7cfb      	ldrb	r3, [r7, #19]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d001      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002a20:	7cfb      	ldrb	r3, [r7, #19]
 8002a22:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d02f      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a30:	4b2b      	ldr	r3, [pc, #172]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a36:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a3e:	4928      	ldr	r1, [pc, #160]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a4e:	d10d      	bne.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	3304      	adds	r3, #4
 8002a54:	2102      	movs	r1, #2
 8002a56:	4618      	mov	r0, r3
 8002a58:	f000 f854 	bl	8002b04 <RCCEx_PLLSAI1_Config>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a60:	7cfb      	ldrb	r3, [r7, #19]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d014      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002a66:	7cfb      	ldrb	r3, [r7, #19]
 8002a68:	74bb      	strb	r3, [r7, #18]
 8002a6a:	e011      	b.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a74:	d10c      	bne.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	3320      	adds	r3, #32
 8002a7a:	2102      	movs	r1, #2
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f000 f935 	bl	8002cec <RCCEx_PLLSAI2_Config>
 8002a82:	4603      	mov	r3, r0
 8002a84:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a86:	7cfb      	ldrb	r3, [r7, #19]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002a8c:	7cfb      	ldrb	r3, [r7, #19]
 8002a8e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d00a      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002a9c:	4b10      	ldr	r3, [pc, #64]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002aaa:	490d      	ldr	r1, [pc, #52]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00b      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002abe:	4b08      	ldr	r3, [pc, #32]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ace:	4904      	ldr	r1, [pc, #16]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002ad6:	7cbb      	ldrb	r3, [r7, #18]
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3718      	adds	r7, #24
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	40021000 	.word	0x40021000

08002ae4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002ae8:	4b05      	ldr	r3, [pc, #20]	; (8002b00 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a04      	ldr	r2, [pc, #16]	; (8002b00 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002aee:	f043 0304 	orr.w	r3, r3, #4
 8002af2:	6013      	str	r3, [r2, #0]
}
 8002af4:	bf00      	nop
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	40021000 	.word	0x40021000

08002b04 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b12:	4b75      	ldr	r3, [pc, #468]	; (8002ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	f003 0303 	and.w	r3, r3, #3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d018      	beq.n	8002b50 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002b1e:	4b72      	ldr	r3, [pc, #456]	; (8002ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	f003 0203 	and.w	r2, r3, #3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d10d      	bne.n	8002b4a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
       ||
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d009      	beq.n	8002b4a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002b36:	4b6c      	ldr	r3, [pc, #432]	; (8002ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	091b      	lsrs	r3, r3, #4
 8002b3c:	f003 0307 	and.w	r3, r3, #7
 8002b40:	1c5a      	adds	r2, r3, #1
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
       ||
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d047      	beq.n	8002bda <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	73fb      	strb	r3, [r7, #15]
 8002b4e:	e044      	b.n	8002bda <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2b03      	cmp	r3, #3
 8002b56:	d018      	beq.n	8002b8a <RCCEx_PLLSAI1_Config+0x86>
 8002b58:	2b03      	cmp	r3, #3
 8002b5a:	d825      	bhi.n	8002ba8 <RCCEx_PLLSAI1_Config+0xa4>
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d002      	beq.n	8002b66 <RCCEx_PLLSAI1_Config+0x62>
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d009      	beq.n	8002b78 <RCCEx_PLLSAI1_Config+0x74>
 8002b64:	e020      	b.n	8002ba8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b66:	4b60      	ldr	r3, [pc, #384]	; (8002ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d11d      	bne.n	8002bae <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b76:	e01a      	b.n	8002bae <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b78:	4b5b      	ldr	r3, [pc, #364]	; (8002ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d116      	bne.n	8002bb2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b88:	e013      	b.n	8002bb2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b8a:	4b57      	ldr	r3, [pc, #348]	; (8002ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d10f      	bne.n	8002bb6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b96:	4b54      	ldr	r3, [pc, #336]	; (8002ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d109      	bne.n	8002bb6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ba6:	e006      	b.n	8002bb6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	73fb      	strb	r3, [r7, #15]
      break;
 8002bac:	e004      	b.n	8002bb8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002bae:	bf00      	nop
 8002bb0:	e002      	b.n	8002bb8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002bb2:	bf00      	nop
 8002bb4:	e000      	b.n	8002bb8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002bb6:	bf00      	nop
    }

    if(status == HAL_OK)
 8002bb8:	7bfb      	ldrb	r3, [r7, #15]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d10d      	bne.n	8002bda <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002bbe:	4b4a      	ldr	r3, [pc, #296]	; (8002ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6819      	ldr	r1, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	011b      	lsls	r3, r3, #4
 8002bd2:	430b      	orrs	r3, r1
 8002bd4:	4944      	ldr	r1, [pc, #272]	; (8002ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002bda:	7bfb      	ldrb	r3, [r7, #15]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d17d      	bne.n	8002cdc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002be0:	4b41      	ldr	r3, [pc, #260]	; (8002ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a40      	ldr	r2, [pc, #256]	; (8002ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002be6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002bea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bec:	f7fd feb6 	bl	800095c <HAL_GetTick>
 8002bf0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002bf2:	e009      	b.n	8002c08 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002bf4:	f7fd feb2 	bl	800095c <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d902      	bls.n	8002c08 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	73fb      	strb	r3, [r7, #15]
        break;
 8002c06:	e005      	b.n	8002c14 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c08:	4b37      	ldr	r3, [pc, #220]	; (8002ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1ef      	bne.n	8002bf4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c14:	7bfb      	ldrb	r3, [r7, #15]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d160      	bne.n	8002cdc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d111      	bne.n	8002c44 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c20:	4b31      	ldr	r3, [pc, #196]	; (8002ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002c28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	6892      	ldr	r2, [r2, #8]
 8002c30:	0211      	lsls	r1, r2, #8
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	68d2      	ldr	r2, [r2, #12]
 8002c36:	0912      	lsrs	r2, r2, #4
 8002c38:	0452      	lsls	r2, r2, #17
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	492a      	ldr	r1, [pc, #168]	; (8002ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	610b      	str	r3, [r1, #16]
 8002c42:	e027      	b.n	8002c94 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d112      	bne.n	8002c70 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c4a:	4b27      	ldr	r3, [pc, #156]	; (8002ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002c52:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	6892      	ldr	r2, [r2, #8]
 8002c5a:	0211      	lsls	r1, r2, #8
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	6912      	ldr	r2, [r2, #16]
 8002c60:	0852      	lsrs	r2, r2, #1
 8002c62:	3a01      	subs	r2, #1
 8002c64:	0552      	lsls	r2, r2, #21
 8002c66:	430a      	orrs	r2, r1
 8002c68:	491f      	ldr	r1, [pc, #124]	; (8002ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	610b      	str	r3, [r1, #16]
 8002c6e:	e011      	b.n	8002c94 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c70:	4b1d      	ldr	r3, [pc, #116]	; (8002ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002c78:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	6892      	ldr	r2, [r2, #8]
 8002c80:	0211      	lsls	r1, r2, #8
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	6952      	ldr	r2, [r2, #20]
 8002c86:	0852      	lsrs	r2, r2, #1
 8002c88:	3a01      	subs	r2, #1
 8002c8a:	0652      	lsls	r2, r2, #25
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	4916      	ldr	r1, [pc, #88]	; (8002ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002c94:	4b14      	ldr	r3, [pc, #80]	; (8002ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a13      	ldr	r2, [pc, #76]	; (8002ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c9a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c9e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca0:	f7fd fe5c 	bl	800095c <HAL_GetTick>
 8002ca4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ca6:	e009      	b.n	8002cbc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ca8:	f7fd fe58 	bl	800095c <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d902      	bls.n	8002cbc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	73fb      	strb	r3, [r7, #15]
          break;
 8002cba:	e005      	b.n	8002cc8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002cbc:	4b0a      	ldr	r3, [pc, #40]	; (8002ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d0ef      	beq.n	8002ca8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002cc8:	7bfb      	ldrb	r3, [r7, #15]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d106      	bne.n	8002cdc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002cce:	4b06      	ldr	r3, [pc, #24]	; (8002ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cd0:	691a      	ldr	r2, [r3, #16]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	4904      	ldr	r1, [pc, #16]	; (8002ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	40021000 	.word	0x40021000

08002cec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002cfa:	4b6a      	ldr	r3, [pc, #424]	; (8002ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	f003 0303 	and.w	r3, r3, #3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d018      	beq.n	8002d38 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002d06:	4b67      	ldr	r3, [pc, #412]	; (8002ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	f003 0203 	and.w	r2, r3, #3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d10d      	bne.n	8002d32 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
       ||
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d009      	beq.n	8002d32 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002d1e:	4b61      	ldr	r3, [pc, #388]	; (8002ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	091b      	lsrs	r3, r3, #4
 8002d24:	f003 0307 	and.w	r3, r3, #7
 8002d28:	1c5a      	adds	r2, r3, #1
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
       ||
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d047      	beq.n	8002dc2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	73fb      	strb	r3, [r7, #15]
 8002d36:	e044      	b.n	8002dc2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2b03      	cmp	r3, #3
 8002d3e:	d018      	beq.n	8002d72 <RCCEx_PLLSAI2_Config+0x86>
 8002d40:	2b03      	cmp	r3, #3
 8002d42:	d825      	bhi.n	8002d90 <RCCEx_PLLSAI2_Config+0xa4>
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d002      	beq.n	8002d4e <RCCEx_PLLSAI2_Config+0x62>
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d009      	beq.n	8002d60 <RCCEx_PLLSAI2_Config+0x74>
 8002d4c:	e020      	b.n	8002d90 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d4e:	4b55      	ldr	r3, [pc, #340]	; (8002ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d11d      	bne.n	8002d96 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d5e:	e01a      	b.n	8002d96 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d60:	4b50      	ldr	r3, [pc, #320]	; (8002ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d116      	bne.n	8002d9a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d70:	e013      	b.n	8002d9a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d72:	4b4c      	ldr	r3, [pc, #304]	; (8002ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d10f      	bne.n	8002d9e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d7e:	4b49      	ldr	r3, [pc, #292]	; (8002ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d109      	bne.n	8002d9e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d8e:	e006      	b.n	8002d9e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	73fb      	strb	r3, [r7, #15]
      break;
 8002d94:	e004      	b.n	8002da0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d96:	bf00      	nop
 8002d98:	e002      	b.n	8002da0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d9a:	bf00      	nop
 8002d9c:	e000      	b.n	8002da0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d9e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002da0:	7bfb      	ldrb	r3, [r7, #15]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d10d      	bne.n	8002dc2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002da6:	4b3f      	ldr	r3, [pc, #252]	; (8002ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6819      	ldr	r1, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	3b01      	subs	r3, #1
 8002db8:	011b      	lsls	r3, r3, #4
 8002dba:	430b      	orrs	r3, r1
 8002dbc:	4939      	ldr	r1, [pc, #228]	; (8002ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002dc2:	7bfb      	ldrb	r3, [r7, #15]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d167      	bne.n	8002e98 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002dc8:	4b36      	ldr	r3, [pc, #216]	; (8002ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a35      	ldr	r2, [pc, #212]	; (8002ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dd2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dd4:	f7fd fdc2 	bl	800095c <HAL_GetTick>
 8002dd8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002dda:	e009      	b.n	8002df0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ddc:	f7fd fdbe 	bl	800095c <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d902      	bls.n	8002df0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	73fb      	strb	r3, [r7, #15]
        break;
 8002dee:	e005      	b.n	8002dfc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002df0:	4b2c      	ldr	r3, [pc, #176]	; (8002ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1ef      	bne.n	8002ddc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002dfc:	7bfb      	ldrb	r3, [r7, #15]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d14a      	bne.n	8002e98 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d111      	bne.n	8002e2c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e08:	4b26      	ldr	r3, [pc, #152]	; (8002ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e0a:	695b      	ldr	r3, [r3, #20]
 8002e0c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002e10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	6892      	ldr	r2, [r2, #8]
 8002e18:	0211      	lsls	r1, r2, #8
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	68d2      	ldr	r2, [r2, #12]
 8002e1e:	0912      	lsrs	r2, r2, #4
 8002e20:	0452      	lsls	r2, r2, #17
 8002e22:	430a      	orrs	r2, r1
 8002e24:	491f      	ldr	r1, [pc, #124]	; (8002ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	614b      	str	r3, [r1, #20]
 8002e2a:	e011      	b.n	8002e50 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e2c:	4b1d      	ldr	r3, [pc, #116]	; (8002ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e2e:	695b      	ldr	r3, [r3, #20]
 8002e30:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002e34:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	6892      	ldr	r2, [r2, #8]
 8002e3c:	0211      	lsls	r1, r2, #8
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	6912      	ldr	r2, [r2, #16]
 8002e42:	0852      	lsrs	r2, r2, #1
 8002e44:	3a01      	subs	r2, #1
 8002e46:	0652      	lsls	r2, r2, #25
 8002e48:	430a      	orrs	r2, r1
 8002e4a:	4916      	ldr	r1, [pc, #88]	; (8002ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002e50:	4b14      	ldr	r3, [pc, #80]	; (8002ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a13      	ldr	r2, [pc, #76]	; (8002ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e5a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e5c:	f7fd fd7e 	bl	800095c <HAL_GetTick>
 8002e60:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e62:	e009      	b.n	8002e78 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e64:	f7fd fd7a 	bl	800095c <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d902      	bls.n	8002e78 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	73fb      	strb	r3, [r7, #15]
          break;
 8002e76:	e005      	b.n	8002e84 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e78:	4b0a      	ldr	r3, [pc, #40]	; (8002ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d0ef      	beq.n	8002e64 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002e84:	7bfb      	ldrb	r3, [r7, #15]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d106      	bne.n	8002e98 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002e8a:	4b06      	ldr	r3, [pc, #24]	; (8002ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e8c:	695a      	ldr	r2, [r3, #20]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	4904      	ldr	r1, [pc, #16]	; (8002ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	40021000 	.word	0x40021000

08002ea8 <__libc_init_array>:
 8002ea8:	b570      	push	{r4, r5, r6, lr}
 8002eaa:	4d0d      	ldr	r5, [pc, #52]	; (8002ee0 <__libc_init_array+0x38>)
 8002eac:	4c0d      	ldr	r4, [pc, #52]	; (8002ee4 <__libc_init_array+0x3c>)
 8002eae:	1b64      	subs	r4, r4, r5
 8002eb0:	10a4      	asrs	r4, r4, #2
 8002eb2:	2600      	movs	r6, #0
 8002eb4:	42a6      	cmp	r6, r4
 8002eb6:	d109      	bne.n	8002ecc <__libc_init_array+0x24>
 8002eb8:	4d0b      	ldr	r5, [pc, #44]	; (8002ee8 <__libc_init_array+0x40>)
 8002eba:	4c0c      	ldr	r4, [pc, #48]	; (8002eec <__libc_init_array+0x44>)
 8002ebc:	f000 f820 	bl	8002f00 <_init>
 8002ec0:	1b64      	subs	r4, r4, r5
 8002ec2:	10a4      	asrs	r4, r4, #2
 8002ec4:	2600      	movs	r6, #0
 8002ec6:	42a6      	cmp	r6, r4
 8002ec8:	d105      	bne.n	8002ed6 <__libc_init_array+0x2e>
 8002eca:	bd70      	pop	{r4, r5, r6, pc}
 8002ecc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ed0:	4798      	blx	r3
 8002ed2:	3601      	adds	r6, #1
 8002ed4:	e7ee      	b.n	8002eb4 <__libc_init_array+0xc>
 8002ed6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002eda:	4798      	blx	r3
 8002edc:	3601      	adds	r6, #1
 8002ede:	e7f2      	b.n	8002ec6 <__libc_init_array+0x1e>
 8002ee0:	08002f58 	.word	0x08002f58
 8002ee4:	08002f58 	.word	0x08002f58
 8002ee8:	08002f58 	.word	0x08002f58
 8002eec:	08002f5c 	.word	0x08002f5c

08002ef0 <memset>:
 8002ef0:	4402      	add	r2, r0
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d100      	bne.n	8002efa <memset+0xa>
 8002ef8:	4770      	bx	lr
 8002efa:	f803 1b01 	strb.w	r1, [r3], #1
 8002efe:	e7f9      	b.n	8002ef4 <memset+0x4>

08002f00 <_init>:
 8002f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f02:	bf00      	nop
 8002f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f06:	bc08      	pop	{r3}
 8002f08:	469e      	mov	lr, r3
 8002f0a:	4770      	bx	lr

08002f0c <_fini>:
 8002f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f0e:	bf00      	nop
 8002f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f12:	bc08      	pop	{r3}
 8002f14:	469e      	mov	lr, r3
 8002f16:	4770      	bx	lr
